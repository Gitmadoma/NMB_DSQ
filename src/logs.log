2023-12-10 13:27:42,723:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 13:27:42,723:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 13:27:42,723:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 13:27:42,723:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 13:27:43,595:WARNING:C:\Users\MD\Documents\Freelance Work\Dec2023\NMB_DSQ\src\app.py:5: DeprecationWarning: `import pandas_profiling` is going to be deprecated by April 1st. Please use `import ydata_profiling` instead.
  import pandas_profiling

2023-12-10 13:28:31,631:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 13:28:31,631:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 13:28:31,631:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 13:28:31,631:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 13:28:31,952:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\numba\core\decorators.py:262: NumbaDeprecationWarning: [1mnumba.generated_jit is deprecated. Please see the documentation at: https://numba.readthedocs.io/en/stable/reference/deprecation.html#deprecation-of-generated-jit for more information and advice on a suitable replacement.[0m
  warnings.warn(msg, NumbaDeprecationWarning)

2023-12-10 13:28:31,955:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\visions\backends\shared\nan_handling.py:50: NumbaDeprecationWarning: [1mThe 'nopython' keyword argument was not supplied to the 'numba.jit' decorator. The implicit default value for this argument is currently False, but it will be changed to True in Numba 0.59.0. See https://numba.readthedocs.io/en/stable/reference/deprecation.html#deprecation-of-object-mode-fall-back-behaviour-when-using-jit for details.[0m
  @nb.jit

2023-12-10 13:29:07,731:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 13:29:07,731:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 13:29:07,731:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 13:29:07,731:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 13:29:08,063:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\numba\core\decorators.py:262: NumbaDeprecationWarning: [1mnumba.generated_jit is deprecated. Please see the documentation at: https://numba.readthedocs.io/en/stable/reference/deprecation.html#deprecation-of-generated-jit for more information and advice on a suitable replacement.[0m
  warnings.warn(msg, NumbaDeprecationWarning)

2023-12-10 13:29:08,066:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\visions\backends\shared\nan_handling.py:50: NumbaDeprecationWarning: [1mThe 'nopython' keyword argument was not supplied to the 'numba.jit' decorator. The implicit default value for this argument is currently False, but it will be changed to True in Numba 0.59.0. See https://numba.readthedocs.io/en/stable/reference/deprecation.html#deprecation-of-object-mode-fall-back-behaviour-when-using-jit for details.[0m
  @nb.jit

2023-12-10 13:32:22,688:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 13:32:22,688:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 13:32:22,688:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 13:32:22,688:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 13:36:20,308:INFO:PyCaret RegressionExperiment
2023-12-10 13:36:20,308:INFO:Logging name: reg-default-name
2023-12-10 13:36:20,308:INFO:ML Usecase: MLUsecase.REGRESSION
2023-12-10 13:36:20,308:INFO:version 3.2.0
2023-12-10 13:36:20,308:INFO:Initializing setup()
2023-12-10 13:36:20,308:INFO:self.USI: 0142
2023-12-10 13:36:20,308:INFO:self._variable_keys: {'y_test', '_available_plots', 'fold_generator', 'html_param', 'logging_param', 'log_plots_param', 'data', 'gpu_param', 'fold_shuffle_param', 'USI', 'seed', 'pipeline', 'y', 'X_test', 'exp_id', 'idx', 'y_train', 'target_param', 'gpu_n_jobs_param', 'memory', 'exp_name_log', 'transform_target_param', 'X', 'X_train', 'fold_groups_param', 'n_jobs_param', '_ml_usecase'}
2023-12-10 13:36:20,308:INFO:Checking environment
2023-12-10 13:36:20,308:INFO:python_version: 3.11.5
2023-12-10 13:36:20,308:INFO:python_build: ('main', 'Aug 27 2023 03:23:48')
2023-12-10 13:36:20,308:INFO:machine: AMD64
2023-12-10 13:36:20,312:INFO:platform: Windows-10-10.0.22621-SP0
2023-12-10 13:36:20,316:INFO:Memory: svmem(total=68447969280, available=47203631104, percent=31.0, used=21244338176, free=47203631104)
2023-12-10 13:36:20,316:INFO:Physical Core: 16
2023-12-10 13:36:20,316:INFO:Logical Core: 24
2023-12-10 13:36:20,316:INFO:Checking libraries
2023-12-10 13:36:20,316:INFO:System:
2023-12-10 13:36:20,316:INFO:    python: 3.11.5 | packaged by conda-forge | (main, Aug 27 2023, 03:23:48) [MSC v.1936 64 bit (AMD64)]
2023-12-10 13:36:20,316:INFO:executable: C:\Users\MD\anaconda3\envs\nmb-ml\python.exe
2023-12-10 13:36:20,316:INFO:   machine: Windows-10-10.0.22621-SP0
2023-12-10 13:36:20,316:INFO:PyCaret required dependencies:
2023-12-10 13:36:20,327:INFO:                 pip: 23.3.1
2023-12-10 13:36:20,327:INFO:          setuptools: 68.2.2
2023-12-10 13:36:20,327:INFO:             pycaret: 3.2.0
2023-12-10 13:36:20,327:INFO:             IPython: 8.18.1
2023-12-10 13:36:20,327:INFO:          ipywidgets: 8.1.1
2023-12-10 13:36:20,327:INFO:                tqdm: 4.66.1
2023-12-10 13:36:20,327:INFO:               numpy: 1.25.2
2023-12-10 13:36:20,327:INFO:              pandas: 1.5.3
2023-12-10 13:36:20,327:INFO:              jinja2: 3.1.2
2023-12-10 13:36:20,327:INFO:               scipy: 1.10.1
2023-12-10 13:36:20,327:INFO:              joblib: 1.1.1
2023-12-10 13:36:20,327:INFO:             sklearn: 1.2.2
2023-12-10 13:36:20,327:INFO:                pyod: 1.1.2
2023-12-10 13:36:20,327:INFO:            imblearn: 0.11.0
2023-12-10 13:36:20,327:INFO:   category_encoders: 2.6.3
2023-12-10 13:36:20,327:INFO:            lightgbm: 4.1.0
2023-12-10 13:36:20,327:INFO:               numba: 0.58.1
2023-12-10 13:36:20,327:INFO:            requests: 2.31.0
2023-12-10 13:36:20,327:INFO:          matplotlib: 3.6.0
2023-12-10 13:36:20,327:INFO:          scikitplot: 0.3.7
2023-12-10 13:36:20,327:INFO:         yellowbrick: 1.5
2023-12-10 13:36:20,327:INFO:              plotly: 5.18.0
2023-12-10 13:36:20,327:INFO:    plotly-resampler: Not installed
2023-12-10 13:36:20,327:INFO:             kaleido: 0.2.1
2023-12-10 13:36:20,327:INFO:           schemdraw: 0.15
2023-12-10 13:36:20,327:INFO:         statsmodels: 0.14.0
2023-12-10 13:36:20,327:INFO:              sktime: 0.21.1
2023-12-10 13:36:20,327:INFO:               tbats: 1.1.3
2023-12-10 13:36:20,327:INFO:            pmdarima: 2.0.4
2023-12-10 13:36:20,327:INFO:              psutil: 5.9.5
2023-12-10 13:36:20,327:INFO:          markupsafe: 2.1.3
2023-12-10 13:36:20,327:INFO:             pickle5: Not installed
2023-12-10 13:36:20,327:INFO:         cloudpickle: 3.0.0
2023-12-10 13:36:20,327:INFO:         deprecation: 2.1.0
2023-12-10 13:36:20,327:INFO:              xxhash: 3.4.1
2023-12-10 13:36:20,327:INFO:           wurlitzer: Not installed
2023-12-10 13:36:20,327:INFO:PyCaret optional dependencies:
2023-12-10 13:36:20,332:INFO:                shap: Not installed
2023-12-10 13:36:20,332:INFO:           interpret: Not installed
2023-12-10 13:36:20,332:INFO:                umap: Not installed
2023-12-10 13:36:20,332:INFO:     ydata_profiling: 4.6.3
2023-12-10 13:36:20,332:INFO:  explainerdashboard: Not installed
2023-12-10 13:36:20,332:INFO:             autoviz: Not installed
2023-12-10 13:36:20,332:INFO:           fairlearn: Not installed
2023-12-10 13:36:20,332:INFO:          deepchecks: Not installed
2023-12-10 13:36:20,332:INFO:             xgboost: Not installed
2023-12-10 13:36:20,332:INFO:            catboost: Not installed
2023-12-10 13:36:20,332:INFO:              kmodes: Not installed
2023-12-10 13:36:20,332:INFO:             mlxtend: Not installed
2023-12-10 13:36:20,332:INFO:       statsforecast: Not installed
2023-12-10 13:36:20,332:INFO:        tune_sklearn: Not installed
2023-12-10 13:36:20,332:INFO:                 ray: Not installed
2023-12-10 13:36:20,332:INFO:            hyperopt: Not installed
2023-12-10 13:36:20,332:INFO:              optuna: Not installed
2023-12-10 13:36:20,332:INFO:               skopt: Not installed
2023-12-10 13:36:20,332:INFO:              mlflow: Not installed
2023-12-10 13:36:20,332:INFO:              gradio: Not installed
2023-12-10 13:36:20,332:INFO:             fastapi: Not installed
2023-12-10 13:36:20,332:INFO:             uvicorn: Not installed
2023-12-10 13:36:20,332:INFO:              m2cgen: Not installed
2023-12-10 13:36:20,332:INFO:           evidently: Not installed
2023-12-10 13:36:20,332:INFO:               fugue: Not installed
2023-12-10 13:36:20,332:INFO:           streamlit: 1.29.0
2023-12-10 13:36:20,332:INFO:             prophet: Not installed
2023-12-10 13:36:20,333:INFO:None
2023-12-10 13:36:20,333:INFO:Set up data.
2023-12-10 13:36:20,360:INFO:Set up folding strategy.
2023-12-10 13:36:20,360:INFO:Set up train/test split.
2023-12-10 13:36:20,368:INFO:Set up index.
2023-12-10 13:36:20,368:INFO:Assigning column types.
2023-12-10 13:36:20,371:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-12-10 13:36:20,371:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-12-10 13:36:20,373:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-12-10 13:36:20,375:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-12-10 13:36:20,404:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-12-10 13:36:20,424:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-12-10 13:36:20,424:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:36:20,424:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:36:20,424:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-12-10 13:36:20,426:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-12-10 13:36:20,429:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-12-10 13:36:20,457:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-12-10 13:36:20,477:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-12-10 13:36:20,477:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:36:20,477:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:36:20,478:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-12-10 13:36:20,480:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-12-10 13:36:20,482:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-12-10 13:36:20,510:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-12-10 13:36:20,530:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-12-10 13:36:20,531:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:36:20,531:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:36:20,533:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-12-10 13:36:20,535:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-12-10 13:36:20,563:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-12-10 13:36:20,583:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-12-10 13:36:20,584:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:36:20,584:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:36:20,584:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-12-10 13:36:20,588:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-12-10 13:36:20,616:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-12-10 13:36:20,636:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-12-10 13:36:20,637:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:36:20,637:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:36:20,641:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-12-10 13:36:20,668:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-12-10 13:36:20,688:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-12-10 13:36:20,689:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:36:20,689:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:36:20,689:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-12-10 13:36:20,720:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-12-10 13:36:20,740:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-12-10 13:36:20,740:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:36:20,740:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:36:20,771:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-12-10 13:36:20,791:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-12-10 13:36:20,791:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:36:20,791:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:36:20,792:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-12-10 13:36:20,822:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-12-10 13:36:20,842:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:36:20,842:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:36:20,873:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-12-10 13:36:20,893:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:36:20,893:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:36:20,893:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-12-10 13:36:20,953:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:36:20,953:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:36:21,005:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:36:21,005:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:36:21,007:INFO:Preparing preprocessing pipeline...
2023-12-10 13:36:21,007:INFO:Set up simple imputation.
2023-12-10 13:36:21,010:INFO:Set up encoding of ordinal features.
2023-12-10 13:36:21,014:INFO:Set up encoding of categorical features.
2023-12-10 13:45:13,740:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 13:45:13,740:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 13:45:13,740:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 13:45:13,740:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 13:45:47,221:INFO:PyCaret ClassificationExperiment
2023-12-10 13:45:47,221:INFO:Logging name: clf-default-name
2023-12-10 13:45:47,221:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-12-10 13:45:47,221:INFO:version 3.2.0
2023-12-10 13:45:47,221:INFO:Initializing setup()
2023-12-10 13:45:47,221:INFO:self.USI: f22e
2023-12-10 13:45:47,221:INFO:self._variable_keys: {'USI', 'fix_imbalance', 'data', 'y', 'n_jobs_param', 'exp_id', 'pipeline', 'logging_param', 'html_param', 'gpu_param', 'exp_name_log', 'target_param', 'fold_shuffle_param', '_ml_usecase', 'fold_groups_param', 'log_plots_param', 'idx', 'X', 'X_test', 'seed', '_available_plots', 'gpu_n_jobs_param', 'y_test', 'y_train', 'fold_generator', 'is_multiclass', 'X_train', 'memory'}
2023-12-10 13:45:47,221:INFO:Checking environment
2023-12-10 13:45:47,221:INFO:python_version: 3.11.5
2023-12-10 13:45:47,221:INFO:python_build: ('main', 'Aug 27 2023 03:23:48')
2023-12-10 13:45:47,221:INFO:machine: AMD64
2023-12-10 13:45:47,226:INFO:platform: Windows-10-10.0.22621-SP0
2023-12-10 13:45:47,229:INFO:Memory: svmem(total=68447969280, available=47627374592, percent=30.4, used=20820594688, free=47627374592)
2023-12-10 13:45:47,229:INFO:Physical Core: 16
2023-12-10 13:45:47,229:INFO:Logical Core: 24
2023-12-10 13:45:47,229:INFO:Checking libraries
2023-12-10 13:45:47,229:INFO:System:
2023-12-10 13:45:47,229:INFO:    python: 3.11.5 | packaged by conda-forge | (main, Aug 27 2023, 03:23:48) [MSC v.1936 64 bit (AMD64)]
2023-12-10 13:45:47,229:INFO:executable: C:\Users\MD\anaconda3\envs\nmb-ml\python.exe
2023-12-10 13:45:47,229:INFO:   machine: Windows-10-10.0.22621-SP0
2023-12-10 13:45:47,229:INFO:PyCaret required dependencies:
2023-12-10 13:45:47,240:INFO:                 pip: 23.3.1
2023-12-10 13:45:47,240:INFO:          setuptools: 68.2.2
2023-12-10 13:45:47,240:INFO:             pycaret: 3.2.0
2023-12-10 13:45:47,240:INFO:             IPython: 8.18.1
2023-12-10 13:45:47,240:INFO:          ipywidgets: 8.1.1
2023-12-10 13:45:47,240:INFO:                tqdm: 4.66.1
2023-12-10 13:45:47,240:INFO:               numpy: 1.25.2
2023-12-10 13:45:47,240:INFO:              pandas: 1.5.3
2023-12-10 13:45:47,240:INFO:              jinja2: 3.1.2
2023-12-10 13:45:47,240:INFO:               scipy: 1.10.1
2023-12-10 13:45:47,240:INFO:              joblib: 1.1.1
2023-12-10 13:45:47,240:INFO:             sklearn: 1.2.2
2023-12-10 13:45:47,240:INFO:                pyod: 1.1.2
2023-12-10 13:45:47,240:INFO:            imblearn: 0.11.0
2023-12-10 13:45:47,240:INFO:   category_encoders: 2.6.3
2023-12-10 13:45:47,240:INFO:            lightgbm: 4.1.0
2023-12-10 13:45:47,240:INFO:               numba: 0.58.1
2023-12-10 13:45:47,240:INFO:            requests: 2.31.0
2023-12-10 13:45:47,240:INFO:          matplotlib: 3.6.0
2023-12-10 13:45:47,240:INFO:          scikitplot: 0.3.7
2023-12-10 13:45:47,240:INFO:         yellowbrick: 1.5
2023-12-10 13:45:47,240:INFO:              plotly: 5.18.0
2023-12-10 13:45:47,240:INFO:    plotly-resampler: Not installed
2023-12-10 13:45:47,240:INFO:             kaleido: 0.2.1
2023-12-10 13:45:47,240:INFO:           schemdraw: 0.15
2023-12-10 13:45:47,240:INFO:         statsmodels: 0.14.0
2023-12-10 13:45:47,240:INFO:              sktime: 0.21.1
2023-12-10 13:45:47,240:INFO:               tbats: 1.1.3
2023-12-10 13:45:47,240:INFO:            pmdarima: 2.0.4
2023-12-10 13:45:47,240:INFO:              psutil: 5.9.5
2023-12-10 13:45:47,240:INFO:          markupsafe: 2.1.3
2023-12-10 13:45:47,240:INFO:             pickle5: Not installed
2023-12-10 13:45:47,240:INFO:         cloudpickle: 3.0.0
2023-12-10 13:45:47,240:INFO:         deprecation: 2.1.0
2023-12-10 13:45:47,240:INFO:              xxhash: 3.4.1
2023-12-10 13:45:47,240:INFO:           wurlitzer: Not installed
2023-12-10 13:45:47,240:INFO:PyCaret optional dependencies:
2023-12-10 13:45:47,245:INFO:                shap: Not installed
2023-12-10 13:45:47,245:INFO:           interpret: Not installed
2023-12-10 13:45:47,245:INFO:                umap: Not installed
2023-12-10 13:45:47,245:INFO:     ydata_profiling: 4.6.3
2023-12-10 13:45:47,245:INFO:  explainerdashboard: Not installed
2023-12-10 13:45:47,245:INFO:             autoviz: Not installed
2023-12-10 13:45:47,245:INFO:           fairlearn: Not installed
2023-12-10 13:45:47,245:INFO:          deepchecks: Not installed
2023-12-10 13:45:47,245:INFO:             xgboost: Not installed
2023-12-10 13:45:47,245:INFO:            catboost: Not installed
2023-12-10 13:45:47,245:INFO:              kmodes: Not installed
2023-12-10 13:45:47,245:INFO:             mlxtend: Not installed
2023-12-10 13:45:47,245:INFO:       statsforecast: Not installed
2023-12-10 13:45:47,245:INFO:        tune_sklearn: Not installed
2023-12-10 13:45:47,245:INFO:                 ray: Not installed
2023-12-10 13:45:47,245:INFO:            hyperopt: Not installed
2023-12-10 13:45:47,245:INFO:              optuna: Not installed
2023-12-10 13:45:47,245:INFO:               skopt: Not installed
2023-12-10 13:45:47,245:INFO:              mlflow: Not installed
2023-12-10 13:45:47,245:INFO:              gradio: Not installed
2023-12-10 13:45:47,245:INFO:             fastapi: Not installed
2023-12-10 13:45:47,245:INFO:             uvicorn: Not installed
2023-12-10 13:45:47,245:INFO:              m2cgen: Not installed
2023-12-10 13:45:47,245:INFO:           evidently: Not installed
2023-12-10 13:45:47,245:INFO:               fugue: Not installed
2023-12-10 13:45:47,245:INFO:           streamlit: 1.29.0
2023-12-10 13:45:47,245:INFO:             prophet: Not installed
2023-12-10 13:45:47,245:INFO:None
2023-12-10 13:45:47,245:INFO:Set up data.
2023-12-10 13:45:47,272:INFO:Set up folding strategy.
2023-12-10 13:45:47,272:INFO:Set up train/test split.
2023-12-10 13:45:47,292:INFO:Set up index.
2023-12-10 13:45:47,292:INFO:Assigning column types.
2023-12-10 13:45:47,295:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-12-10 13:45:47,315:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-12-10 13:45:47,316:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-12-10 13:45:47,331:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:45:47,331:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:45:47,352:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-12-10 13:45:47,352:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-12-10 13:45:47,365:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:45:47,365:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:45:47,365:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-12-10 13:45:47,386:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-12-10 13:45:47,399:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:45:47,399:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:45:47,420:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-12-10 13:45:47,432:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:45:47,433:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:45:47,433:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2023-12-10 13:45:47,465:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:45:47,465:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:45:47,498:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:45:47,498:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:45:47,499:INFO:Preparing preprocessing pipeline...
2023-12-10 13:45:47,499:INFO:Set up label encoding.
2023-12-10 13:45:47,500:INFO:Set up simple imputation.
2023-12-10 13:45:47,503:INFO:Set up encoding of ordinal features.
2023-12-10 13:45:47,507:INFO:Set up encoding of categorical features.
2023-12-10 13:45:47,772:INFO:Finished creating preprocessing pipeline.
2023-12-10 13:45:47,794:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\MD\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['amount_deposited_via_counter',
                                             'amount_deposited_via_card',
                                             'balance_on_complaign_date',
                                             'restaurant_poin...
                 TransformerWrapper(exclude=None,
                                    include=['customer_registration_number',
                                             'transaction_date',
                                             'complaint_date'],
                                    transformer=TargetEncoder(cols=['customer_registration_number',
                                                                    'transaction_date',
                                                                    'complaint_date'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0)))],
         verbose=False)
2023-12-10 13:45:47,794:INFO:Creating final display dataframe.
2023-12-10 13:45:48,359:INFO:Setup _display_container:                     Description             Value
0                    Session id              4477
1                        Target        complained
2                   Target type            Binary
3                Target mapping     NO: 0, YES: 1
4           Original data shape       (31924, 22)
5        Transformed data shape       (31924, 50)
6   Transformed train set shape       (22346, 50)
7    Transformed test set shape        (9578, 50)
8              Ordinal features                 4
9              Numeric features                12
10         Categorical features                 9
11     Rows with missing values             17.1%
12                   Preprocess              True
13              Imputation type            simple
14           Numeric imputation              mean
15       Categorical imputation              mode
16     Maximum one-hot encoding                25
17              Encoding method              None
18               Fold Generator   StratifiedKFold
19                  Fold Number                10
20                     CPU Jobs                -1
21                      Use GPU             False
22               Log Experiment             False
23              Experiment Name  clf-default-name
24                          USI              f22e
2023-12-10 13:45:48,396:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:45:48,396:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:45:48,430:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:45:48,430:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:45:48,430:INFO:setup() successfully completed in 1.21s...............
2023-12-10 13:45:48,435:INFO:Initializing compare_models()
2023-12-10 13:45:48,435:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000223011AEFD0>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x00000223011AEFD0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2023-12-10 13:45:48,435:INFO:Checking exceptions
2023-12-10 13:45:48,438:INFO:Preparing display monitor
2023-12-10 13:45:48,440:INFO:Initializing Logistic Regression
2023-12-10 13:45:48,440:INFO:Total runtime is 0.0 minutes
2023-12-10 13:45:48,440:INFO:SubProcess create_model() called ==================================
2023-12-10 13:45:48,440:INFO:Initializing create_model()
2023-12-10 13:45:48,440:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000223011AEFD0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002230D748D90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-10 13:45:48,440:INFO:Checking exceptions
2023-12-10 13:45:48,440:INFO:Importing libraries
2023-12-10 13:45:48,440:INFO:Copying training dataset
2023-12-10 13:45:48,443:INFO:Defining folds
2023-12-10 13:45:48,444:INFO:Declaring metric variables
2023-12-10 13:45:48,444:INFO:Importing untrained model
2023-12-10 13:45:48,444:INFO:Logistic Regression Imported successfully
2023-12-10 13:45:48,444:INFO:Starting cross validation
2023-12-10 13:45:48,445:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-10 13:45:51,140:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:51,150:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:51,159:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:51,166:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:51,178:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:51,180:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:51,181:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:51,186:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:51,188:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:51,190:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:51,196:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:51,198:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:51,210:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:51,214:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:51,218:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:51,222:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:51,227:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:51,227:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:51,230:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:51,235:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:51,244:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:51,245:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:51,245:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:51,253:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:51,253:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:51,255:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:51,261:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:51,261:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:51,263:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:51,271:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:51,283:INFO:Calculating mean and std
2023-12-10 13:45:51,283:INFO:Creating metrics dataframe
2023-12-10 13:45:51,285:INFO:Uploading results into container
2023-12-10 13:45:51,285:INFO:Uploading model into container now
2023-12-10 13:45:51,286:INFO:_master_model_container: 1
2023-12-10 13:45:51,286:INFO:_display_container: 2
2023-12-10 13:45:51,286:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4477, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2023-12-10 13:45:51,286:INFO:create_model() successfully completed......................................
2023-12-10 13:45:51,352:INFO:SubProcess create_model() end ==================================
2023-12-10 13:45:51,352:INFO:Creating metrics dataframe
2023-12-10 13:45:51,354:INFO:Initializing K Neighbors Classifier
2023-12-10 13:45:51,354:INFO:Total runtime is 0.04856665929158529 minutes
2023-12-10 13:45:51,354:INFO:SubProcess create_model() called ==================================
2023-12-10 13:45:51,354:INFO:Initializing create_model()
2023-12-10 13:45:51,354:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000223011AEFD0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002230D748D90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-10 13:45:51,354:INFO:Checking exceptions
2023-12-10 13:45:51,354:INFO:Importing libraries
2023-12-10 13:45:51,354:INFO:Copying training dataset
2023-12-10 13:45:51,358:INFO:Defining folds
2023-12-10 13:45:51,358:INFO:Declaring metric variables
2023-12-10 13:45:51,358:INFO:Importing untrained model
2023-12-10 13:45:51,358:INFO:K Neighbors Classifier Imported successfully
2023-12-10 13:45:51,358:INFO:Starting cross validation
2023-12-10 13:45:51,359:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-10 13:45:54,020:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:54,027:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:54,035:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:54,045:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:54,054:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:54,060:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:54,065:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:54,072:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:54,080:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:54,083:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:54,091:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:54,092:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:54,092:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:54,093:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:54,099:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:54,100:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:54,100:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:54,101:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:54,107:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:54,108:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:54,109:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:54,112:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:54,116:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:54,122:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:54,125:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:54,130:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:54,133:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:54,136:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:54,144:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:54,152:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:54,164:INFO:Calculating mean and std
2023-12-10 13:45:54,165:INFO:Creating metrics dataframe
2023-12-10 13:45:54,166:INFO:Uploading results into container
2023-12-10 13:45:54,167:INFO:Uploading model into container now
2023-12-10 13:45:54,167:INFO:_master_model_container: 2
2023-12-10 13:45:54,167:INFO:_display_container: 2
2023-12-10 13:45:54,167:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2023-12-10 13:45:54,167:INFO:create_model() successfully completed......................................
2023-12-10 13:45:54,234:INFO:SubProcess create_model() end ==================================
2023-12-10 13:45:54,234:INFO:Creating metrics dataframe
2023-12-10 13:45:54,236:INFO:Initializing Naive Bayes
2023-12-10 13:45:54,236:INFO:Total runtime is 0.09659998416900635 minutes
2023-12-10 13:45:54,236:INFO:SubProcess create_model() called ==================================
2023-12-10 13:45:54,237:INFO:Initializing create_model()
2023-12-10 13:45:54,237:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000223011AEFD0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002230D748D90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-10 13:45:54,237:INFO:Checking exceptions
2023-12-10 13:45:54,237:INFO:Importing libraries
2023-12-10 13:45:54,237:INFO:Copying training dataset
2023-12-10 13:45:54,241:INFO:Defining folds
2023-12-10 13:45:54,241:INFO:Declaring metric variables
2023-12-10 13:45:54,241:INFO:Importing untrained model
2023-12-10 13:45:54,241:INFO:Naive Bayes Imported successfully
2023-12-10 13:45:54,241:INFO:Starting cross validation
2023-12-10 13:45:54,242:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-10 13:45:54,561:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:54,569:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:54,573:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-10 13:45:54,573:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:54,577:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:54,581:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:54,582:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:54,588:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:54,590:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:54,593:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:54,594:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:54,595:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:54,597:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:54,600:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:54,601:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:54,603:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:54,609:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:54,610:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:54,611:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:55,890:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:55,891:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:55,892:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:55,895:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:55,898:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:55,899:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:55,900:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:55,903:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-10 13:45:55,904:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-10 13:45:55,906:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:55,906:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:55,907:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:55,911:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:55,922:INFO:Calculating mean and std
2023-12-10 13:45:55,922:INFO:Creating metrics dataframe
2023-12-10 13:45:55,924:INFO:Uploading results into container
2023-12-10 13:45:55,924:INFO:Uploading model into container now
2023-12-10 13:45:55,924:INFO:_master_model_container: 3
2023-12-10 13:45:55,924:INFO:_display_container: 2
2023-12-10 13:45:55,925:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2023-12-10 13:45:55,925:INFO:create_model() successfully completed......................................
2023-12-10 13:45:55,993:INFO:SubProcess create_model() end ==================================
2023-12-10 13:45:55,993:INFO:Creating metrics dataframe
2023-12-10 13:45:55,996:INFO:Initializing Decision Tree Classifier
2023-12-10 13:45:55,996:INFO:Total runtime is 0.12593331734339397 minutes
2023-12-10 13:45:55,996:INFO:SubProcess create_model() called ==================================
2023-12-10 13:45:55,996:INFO:Initializing create_model()
2023-12-10 13:45:55,996:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000223011AEFD0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002230D748D90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-10 13:45:55,996:INFO:Checking exceptions
2023-12-10 13:45:55,996:INFO:Importing libraries
2023-12-10 13:45:55,996:INFO:Copying training dataset
2023-12-10 13:45:56,000:INFO:Defining folds
2023-12-10 13:45:56,000:INFO:Declaring metric variables
2023-12-10 13:45:56,000:INFO:Importing untrained model
2023-12-10 13:45:56,000:INFO:Decision Tree Classifier Imported successfully
2023-12-10 13:45:56,000:INFO:Starting cross validation
2023-12-10 13:45:56,001:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-10 13:45:56,321:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,331:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,336:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,339:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,341:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,342:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,345:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,347:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,349:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,353:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,355:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,356:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,356:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,356:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,359:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,360:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,363:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,366:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,368:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,371:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,374:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,380:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,386:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,387:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,388:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,394:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,394:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,396:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,402:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,402:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,413:INFO:Calculating mean and std
2023-12-10 13:45:56,414:INFO:Creating metrics dataframe
2023-12-10 13:45:56,415:INFO:Uploading results into container
2023-12-10 13:45:56,415:INFO:Uploading model into container now
2023-12-10 13:45:56,416:INFO:_master_model_container: 4
2023-12-10 13:45:56,416:INFO:_display_container: 2
2023-12-10 13:45:56,416:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=4477, splitter='best')
2023-12-10 13:45:56,416:INFO:create_model() successfully completed......................................
2023-12-10 13:45:56,496:INFO:SubProcess create_model() end ==================================
2023-12-10 13:45:56,496:INFO:Creating metrics dataframe
2023-12-10 13:45:56,498:INFO:Initializing SVM - Linear Kernel
2023-12-10 13:45:56,498:INFO:Total runtime is 0.1342999776204427 minutes
2023-12-10 13:45:56,498:INFO:SubProcess create_model() called ==================================
2023-12-10 13:45:56,499:INFO:Initializing create_model()
2023-12-10 13:45:56,499:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000223011AEFD0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002230D748D90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-10 13:45:56,499:INFO:Checking exceptions
2023-12-10 13:45:56,499:INFO:Importing libraries
2023-12-10 13:45:56,499:INFO:Copying training dataset
2023-12-10 13:45:56,502:INFO:Defining folds
2023-12-10 13:45:56,502:INFO:Declaring metric variables
2023-12-10 13:45:56,503:INFO:Importing untrained model
2023-12-10 13:45:56,503:INFO:SVM - Linear Kernel Imported successfully
2023-12-10 13:45:56,503:INFO:Starting cross validation
2023-12-10 13:45:56,504:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-10 13:45:56,785:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-12-10 13:45:56,791:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,803:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,814:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,816:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-12-10 13:45:56,816:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-12-10 13:45:56,819:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,819:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,827:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,827:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,834:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,835:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,837:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-12-10 13:45:56,842:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,843:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-12-10 13:45:56,844:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-12-10 13:45:56,847:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-12-10 13:45:56,847:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,848:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,850:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,850:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,854:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-10 13:45:56,856:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,856:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,857:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,858:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-12-10 13:45:56,858:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-12-10 13:45:56,859:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-12-10 13:45:56,860:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,861:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,861:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,862:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,864:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,864:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,868:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,869:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,869:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,870:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,877:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,877:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,878:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:56,889:INFO:Calculating mean and std
2023-12-10 13:45:56,890:INFO:Creating metrics dataframe
2023-12-10 13:45:56,891:INFO:Uploading results into container
2023-12-10 13:45:56,891:INFO:Uploading model into container now
2023-12-10 13:45:56,891:INFO:_master_model_container: 5
2023-12-10 13:45:56,891:INFO:_display_container: 2
2023-12-10 13:45:56,892:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=4477, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2023-12-10 13:45:56,892:INFO:create_model() successfully completed......................................
2023-12-10 13:45:56,954:INFO:SubProcess create_model() end ==================================
2023-12-10 13:45:56,955:INFO:Creating metrics dataframe
2023-12-10 13:45:56,957:INFO:Initializing Ridge Classifier
2023-12-10 13:45:56,957:INFO:Total runtime is 0.14195001125335693 minutes
2023-12-10 13:45:56,957:INFO:SubProcess create_model() called ==================================
2023-12-10 13:45:56,957:INFO:Initializing create_model()
2023-12-10 13:45:56,957:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000223011AEFD0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002230D748D90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-10 13:45:56,957:INFO:Checking exceptions
2023-12-10 13:45:56,957:INFO:Importing libraries
2023-12-10 13:45:56,957:INFO:Copying training dataset
2023-12-10 13:45:56,960:INFO:Defining folds
2023-12-10 13:45:56,960:INFO:Declaring metric variables
2023-12-10 13:45:56,961:INFO:Importing untrained model
2023-12-10 13:45:56,961:INFO:Ridge Classifier Imported successfully
2023-12-10 13:45:56,961:INFO:Starting cross validation
2023-12-10 13:45:56,962:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-10 13:45:57,196:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.91098e-22): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2023-12-10 13:45:57,224:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.91111e-22): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2023-12-10 13:45:57,228:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.91085e-22): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2023-12-10 13:45:57,229:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.91058e-22): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2023-12-10 13:45:57,245:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-12-10 13:45:57,246:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.91388e-22): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2023-12-10 13:45:57,248:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:57,256:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:57,261:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.94888e-22): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2023-12-10 13:45:57,262:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-12-10 13:45:57,264:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.91118e-22): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2023-12-10 13:45:57,264:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:57,265:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.91114e-22): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2023-12-10 13:45:57,266:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:57,267:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.10282e-21): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2023-12-10 13:45:57,268:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-12-10 13:45:57,269:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-12-10 13:45:57,272:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:57,274:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:57,274:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:57,276:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.91065e-22): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2023-12-10 13:45:57,280:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:57,282:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:57,285:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:57,285:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-12-10 13:45:57,288:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:57,289:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:57,292:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-12-10 13:45:57,296:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:57,296:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:57,297:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-12-10 13:45:57,297:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:57,297:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-12-10 13:45:57,300:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:57,301:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:57,304:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:57,305:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:57,305:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-12-10 13:45:57,308:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:57,309:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:57,309:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-12-10 13:45:57,310:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:57,312:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:57,313:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:57,316:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:57,317:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:57,318:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:57,320:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:57,325:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:57,328:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:57,339:INFO:Calculating mean and std
2023-12-10 13:45:57,339:INFO:Creating metrics dataframe
2023-12-10 13:45:57,341:INFO:Uploading results into container
2023-12-10 13:45:57,341:INFO:Uploading model into container now
2023-12-10 13:45:57,341:INFO:_master_model_container: 6
2023-12-10 13:45:57,341:INFO:_display_container: 2
2023-12-10 13:45:57,341:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=4477, solver='auto',
                tol=0.0001)
2023-12-10 13:45:57,342:INFO:create_model() successfully completed......................................
2023-12-10 13:45:57,411:INFO:SubProcess create_model() end ==================================
2023-12-10 13:45:57,411:INFO:Creating metrics dataframe
2023-12-10 13:45:57,413:INFO:Initializing Random Forest Classifier
2023-12-10 13:45:57,413:INFO:Total runtime is 0.14954998095830283 minutes
2023-12-10 13:45:57,413:INFO:SubProcess create_model() called ==================================
2023-12-10 13:45:57,413:INFO:Initializing create_model()
2023-12-10 13:45:57,413:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000223011AEFD0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002230D748D90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-10 13:45:57,413:INFO:Checking exceptions
2023-12-10 13:45:57,413:INFO:Importing libraries
2023-12-10 13:45:57,413:INFO:Copying training dataset
2023-12-10 13:45:57,417:INFO:Defining folds
2023-12-10 13:45:57,417:INFO:Declaring metric variables
2023-12-10 13:45:57,417:INFO:Importing untrained model
2023-12-10 13:45:57,418:INFO:Random Forest Classifier Imported successfully
2023-12-10 13:45:57,418:INFO:Starting cross validation
2023-12-10 13:45:57,418:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-10 13:45:58,068:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,079:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,107:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,111:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,119:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,123:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,130:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,133:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,142:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,157:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,157:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,165:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,165:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,173:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,173:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,224:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,228:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,232:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,232:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,236:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,240:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,240:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,243:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,244:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,248:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,251:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,258:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,356:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,364:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,372:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,384:INFO:Calculating mean and std
2023-12-10 13:45:58,384:INFO:Creating metrics dataframe
2023-12-10 13:45:58,386:INFO:Uploading results into container
2023-12-10 13:45:58,386:INFO:Uploading model into container now
2023-12-10 13:45:58,386:INFO:_master_model_container: 7
2023-12-10 13:45:58,386:INFO:_display_container: 2
2023-12-10 13:45:58,387:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=4477, verbose=0, warm_start=False)
2023-12-10 13:45:58,387:INFO:create_model() successfully completed......................................
2023-12-10 13:45:58,450:INFO:SubProcess create_model() end ==================================
2023-12-10 13:45:58,450:INFO:Creating metrics dataframe
2023-12-10 13:45:58,452:INFO:Initializing Quadratic Discriminant Analysis
2023-12-10 13:45:58,452:INFO:Total runtime is 0.16687024037043255 minutes
2023-12-10 13:45:58,452:INFO:SubProcess create_model() called ==================================
2023-12-10 13:45:58,452:INFO:Initializing create_model()
2023-12-10 13:45:58,452:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000223011AEFD0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002230D748D90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-10 13:45:58,452:INFO:Checking exceptions
2023-12-10 13:45:58,453:INFO:Importing libraries
2023-12-10 13:45:58,453:INFO:Copying training dataset
2023-12-10 13:45:58,456:INFO:Defining folds
2023-12-10 13:45:58,456:INFO:Declaring metric variables
2023-12-10 13:45:58,456:INFO:Importing untrained model
2023-12-10 13:45:58,457:INFO:Quadratic Discriminant Analysis Imported successfully
2023-12-10 13:45:58,457:INFO:Starting cross validation
2023-12-10 13:45:58,458:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-10 13:45:58,692:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-12-10 13:45:58,711:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-12-10 13:45:58,716:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-12-10 13:45:58,719:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-12-10 13:45:58,742:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-12-10 13:45:58,744:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-12-10 13:45:58,754:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-12-10 13:45:58,756:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-12-10 13:45:58,764:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,773:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,777:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,783:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,784:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,785:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,785:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-12-10 13:45:58,788:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,791:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,793:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,798:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,799:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,802:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-12-10 13:45:58,805:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,809:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,811:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,813:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,813:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,816:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,819:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,820:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,820:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,824:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,826:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,828:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,832:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,843:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,851:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,858:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,858:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,866:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,873:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:58,884:INFO:Calculating mean and std
2023-12-10 13:45:58,884:INFO:Creating metrics dataframe
2023-12-10 13:45:58,886:INFO:Uploading results into container
2023-12-10 13:45:58,886:INFO:Uploading model into container now
2023-12-10 13:45:58,886:INFO:_master_model_container: 8
2023-12-10 13:45:58,886:INFO:_display_container: 2
2023-12-10 13:45:58,886:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2023-12-10 13:45:58,886:INFO:create_model() successfully completed......................................
2023-12-10 13:45:58,951:INFO:SubProcess create_model() end ==================================
2023-12-10 13:45:58,952:INFO:Creating metrics dataframe
2023-12-10 13:45:58,954:INFO:Initializing Ada Boost Classifier
2023-12-10 13:45:58,954:INFO:Total runtime is 0.17523690859476726 minutes
2023-12-10 13:45:58,954:INFO:SubProcess create_model() called ==================================
2023-12-10 13:45:58,954:INFO:Initializing create_model()
2023-12-10 13:45:58,954:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000223011AEFD0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002230D748D90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-10 13:45:58,954:INFO:Checking exceptions
2023-12-10 13:45:58,954:INFO:Importing libraries
2023-12-10 13:45:58,954:INFO:Copying training dataset
2023-12-10 13:45:58,958:INFO:Defining folds
2023-12-10 13:45:58,958:INFO:Declaring metric variables
2023-12-10 13:45:58,958:INFO:Importing untrained model
2023-12-10 13:45:58,958:INFO:Ada Boost Classifier Imported successfully
2023-12-10 13:45:58,958:INFO:Starting cross validation
2023-12-10 13:45:58,959:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-10 13:45:59,241:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:59,249:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:59,252:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:59,255:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:59,256:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:59,260:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:59,263:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:59,267:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:59,269:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:59,270:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:59,280:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:59,281:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:59,281:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:59,287:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:59,288:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:59,288:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:59,288:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:59,290:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:59,291:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:59,296:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:59,296:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:59,296:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:59,298:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:59,302:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:59,304:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:59,307:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:59,312:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:59,327:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:59,335:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:59,343:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:45:59,354:INFO:Calculating mean and std
2023-12-10 13:45:59,354:INFO:Creating metrics dataframe
2023-12-10 13:45:59,355:INFO:Uploading results into container
2023-12-10 13:45:59,356:INFO:Uploading model into container now
2023-12-10 13:45:59,356:INFO:_master_model_container: 9
2023-12-10 13:45:59,356:INFO:_display_container: 2
2023-12-10 13:45:59,356:INFO:AdaBoostClassifier(algorithm='SAMME.R', base_estimator='deprecated',
                   estimator=None, learning_rate=1.0, n_estimators=50,
                   random_state=4477)
2023-12-10 13:45:59,356:INFO:create_model() successfully completed......................................
2023-12-10 13:45:59,430:INFO:SubProcess create_model() end ==================================
2023-12-10 13:45:59,430:INFO:Creating metrics dataframe
2023-12-10 13:45:59,432:INFO:Initializing Gradient Boosting Classifier
2023-12-10 13:45:59,432:INFO:Total runtime is 0.18320362567901613 minutes
2023-12-10 13:45:59,432:INFO:SubProcess create_model() called ==================================
2023-12-10 13:45:59,432:INFO:Initializing create_model()
2023-12-10 13:45:59,432:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000223011AEFD0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002230D748D90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-10 13:45:59,432:INFO:Checking exceptions
2023-12-10 13:45:59,432:INFO:Importing libraries
2023-12-10 13:45:59,432:INFO:Copying training dataset
2023-12-10 13:45:59,436:INFO:Defining folds
2023-12-10 13:45:59,436:INFO:Declaring metric variables
2023-12-10 13:45:59,436:INFO:Importing untrained model
2023-12-10 13:45:59,436:INFO:Gradient Boosting Classifier Imported successfully
2023-12-10 13:45:59,437:INFO:Starting cross validation
2023-12-10 13:45:59,437:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-10 13:46:00,772:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:00,780:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:00,787:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:00,788:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:00,796:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:00,799:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:00,804:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:00,810:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:00,816:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:00,818:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:00,818:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:00,824:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:00,825:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:00,825:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:00,832:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:00,832:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:00,832:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:00,833:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:00,840:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:00,840:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:00,847:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:00,849:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:00,856:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:00,864:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:00,877:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:00,885:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:00,892:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:00,925:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:00,933:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:00,940:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:00,950:INFO:Calculating mean and std
2023-12-10 13:46:00,951:INFO:Creating metrics dataframe
2023-12-10 13:46:00,952:INFO:Uploading results into container
2023-12-10 13:46:00,953:INFO:Uploading model into container now
2023-12-10 13:46:00,953:INFO:_master_model_container: 10
2023-12-10 13:46:00,953:INFO:_display_container: 2
2023-12-10 13:46:00,953:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=4477, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2023-12-10 13:46:00,953:INFO:create_model() successfully completed......................................
2023-12-10 13:46:01,029:INFO:SubProcess create_model() end ==================================
2023-12-10 13:46:01,030:INFO:Creating metrics dataframe
2023-12-10 13:46:01,032:INFO:Initializing Linear Discriminant Analysis
2023-12-10 13:46:01,032:INFO:Total runtime is 0.2098702430725098 minutes
2023-12-10 13:46:01,032:INFO:SubProcess create_model() called ==================================
2023-12-10 13:46:01,032:INFO:Initializing create_model()
2023-12-10 13:46:01,032:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000223011AEFD0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002230D748D90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-10 13:46:01,032:INFO:Checking exceptions
2023-12-10 13:46:01,032:INFO:Importing libraries
2023-12-10 13:46:01,032:INFO:Copying training dataset
2023-12-10 13:46:01,036:INFO:Defining folds
2023-12-10 13:46:01,036:INFO:Declaring metric variables
2023-12-10 13:46:01,036:INFO:Importing untrained model
2023-12-10 13:46:01,036:INFO:Linear Discriminant Analysis Imported successfully
2023-12-10 13:46:01,036:INFO:Starting cross validation
2023-12-10 13:46:01,037:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-10 13:46:01,378:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:01,386:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:01,393:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:01,396:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:01,402:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:01,403:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:01,404:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:01,410:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:01,410:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:01,412:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:01,412:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:01,417:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:01,418:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:01,419:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:01,420:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:01,426:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:01,426:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:01,428:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:01,430:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:01,434:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:01,434:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:01,438:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:01,438:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:01,441:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:01,445:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:01,448:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:01,455:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:01,459:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:01,467:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:01,474:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:01,485:INFO:Calculating mean and std
2023-12-10 13:46:01,485:INFO:Creating metrics dataframe
2023-12-10 13:46:01,487:INFO:Uploading results into container
2023-12-10 13:46:01,487:INFO:Uploading model into container now
2023-12-10 13:46:01,487:INFO:_master_model_container: 11
2023-12-10 13:46:01,487:INFO:_display_container: 2
2023-12-10 13:46:01,487:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2023-12-10 13:46:01,487:INFO:create_model() successfully completed......................................
2023-12-10 13:46:01,556:INFO:SubProcess create_model() end ==================================
2023-12-10 13:46:01,556:INFO:Creating metrics dataframe
2023-12-10 13:46:01,558:INFO:Initializing Extra Trees Classifier
2023-12-10 13:46:01,558:INFO:Total runtime is 0.21863695780436201 minutes
2023-12-10 13:46:01,558:INFO:SubProcess create_model() called ==================================
2023-12-10 13:46:01,558:INFO:Initializing create_model()
2023-12-10 13:46:01,558:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000223011AEFD0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002230D748D90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-10 13:46:01,558:INFO:Checking exceptions
2023-12-10 13:46:01,558:INFO:Importing libraries
2023-12-10 13:46:01,558:INFO:Copying training dataset
2023-12-10 13:46:01,562:INFO:Defining folds
2023-12-10 13:46:01,562:INFO:Declaring metric variables
2023-12-10 13:46:01,562:INFO:Importing untrained model
2023-12-10 13:46:01,562:INFO:Extra Trees Classifier Imported successfully
2023-12-10 13:46:01,562:INFO:Starting cross validation
2023-12-10 13:46:01,563:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-10 13:46:02,113:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:02,131:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:02,145:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:02,145:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:02,159:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:02,171:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:02,192:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:02,202:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:02,208:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:02,210:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:02,213:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:02,218:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:02,220:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:02,229:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:02,232:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:02,236:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:02,244:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:02,250:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:02,252:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:02,256:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:02,257:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:02,258:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:02,263:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:02,264:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:02,266:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:02,271:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:02,272:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:02,299:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:02,307:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:02,314:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:02,326:INFO:Calculating mean and std
2023-12-10 13:46:02,327:INFO:Creating metrics dataframe
2023-12-10 13:46:02,328:INFO:Uploading results into container
2023-12-10 13:46:02,329:INFO:Uploading model into container now
2023-12-10 13:46:02,329:INFO:_master_model_container: 12
2023-12-10 13:46:02,329:INFO:_display_container: 2
2023-12-10 13:46:02,329:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=4477, verbose=0, warm_start=False)
2023-12-10 13:46:02,329:INFO:create_model() successfully completed......................................
2023-12-10 13:46:02,395:INFO:SubProcess create_model() end ==================================
2023-12-10 13:46:02,395:INFO:Creating metrics dataframe
2023-12-10 13:46:02,397:INFO:Initializing Light Gradient Boosting Machine
2023-12-10 13:46:02,397:INFO:Total runtime is 0.23262025912602746 minutes
2023-12-10 13:46:02,397:INFO:SubProcess create_model() called ==================================
2023-12-10 13:46:02,397:INFO:Initializing create_model()
2023-12-10 13:46:02,397:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000223011AEFD0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002230D748D90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-10 13:46:02,397:INFO:Checking exceptions
2023-12-10 13:46:02,397:INFO:Importing libraries
2023-12-10 13:46:02,397:INFO:Copying training dataset
2023-12-10 13:46:02,401:INFO:Defining folds
2023-12-10 13:46:02,401:INFO:Declaring metric variables
2023-12-10 13:46:02,402:INFO:Importing untrained model
2023-12-10 13:46:02,402:INFO:Light Gradient Boosting Machine Imported successfully
2023-12-10 13:46:02,402:INFO:Starting cross validation
2023-12-10 13:46:02,403:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-10 13:46:03,070:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,082:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,089:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,094:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,095:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,098:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,100:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,106:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,106:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,110:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,112:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,112:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,117:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,118:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,122:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,124:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,129:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,135:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,148:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,157:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,166:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,200:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,209:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,218:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,228:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,235:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,240:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,247:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,252:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,258:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,271:INFO:Calculating mean and std
2023-12-10 13:46:03,271:INFO:Creating metrics dataframe
2023-12-10 13:46:03,273:INFO:Uploading results into container
2023-12-10 13:46:03,273:INFO:Uploading model into container now
2023-12-10 13:46:03,273:INFO:_master_model_container: 13
2023-12-10 13:46:03,273:INFO:_display_container: 2
2023-12-10 13:46:03,274:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=4477, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2023-12-10 13:46:03,274:INFO:create_model() successfully completed......................................
2023-12-10 13:46:03,350:INFO:SubProcess create_model() end ==================================
2023-12-10 13:46:03,350:INFO:Creating metrics dataframe
2023-12-10 13:46:03,352:INFO:Initializing Dummy Classifier
2023-12-10 13:46:03,353:INFO:Total runtime is 0.24855359792709353 minutes
2023-12-10 13:46:03,353:INFO:SubProcess create_model() called ==================================
2023-12-10 13:46:03,353:INFO:Initializing create_model()
2023-12-10 13:46:03,353:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000223011AEFD0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002230D748D90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-10 13:46:03,353:INFO:Checking exceptions
2023-12-10 13:46:03,353:INFO:Importing libraries
2023-12-10 13:46:03,353:INFO:Copying training dataset
2023-12-10 13:46:03,357:INFO:Defining folds
2023-12-10 13:46:03,357:INFO:Declaring metric variables
2023-12-10 13:46:03,357:INFO:Importing untrained model
2023-12-10 13:46:03,357:INFO:Dummy Classifier Imported successfully
2023-12-10 13:46:03,357:INFO:Starting cross validation
2023-12-10 13:46:03,358:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-10 13:46:03,636:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,636:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,644:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,644:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,646:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,648:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-10 13:46:03,648:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-10 13:46:03,651:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,651:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,653:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,654:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,658:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-10 13:46:03,660:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,660:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,661:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,662:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,665:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-10 13:46:03,668:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,668:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,669:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,672:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-10 13:46:03,673:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-10 13:46:03,673:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,675:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,676:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,676:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,681:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,682:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,685:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-10 13:46:03,687:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-10 13:46:03,688:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,689:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,690:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,690:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,697:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,697:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,701:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-10 13:46:03,702:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-10 13:46:03,704:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,705:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:46:03,716:INFO:Calculating mean and std
2023-12-10 13:46:03,716:INFO:Creating metrics dataframe
2023-12-10 13:46:03,718:INFO:Uploading results into container
2023-12-10 13:46:03,718:INFO:Uploading model into container now
2023-12-10 13:46:03,718:INFO:_master_model_container: 14
2023-12-10 13:46:03,718:INFO:_display_container: 2
2023-12-10 13:46:03,718:INFO:DummyClassifier(constant=None, random_state=4477, strategy='prior')
2023-12-10 13:46:03,718:INFO:create_model() successfully completed......................................
2023-12-10 13:46:03,790:INFO:SubProcess create_model() end ==================================
2023-12-10 13:46:03,790:INFO:Creating metrics dataframe
2023-12-10 13:46:03,793:INFO:Initializing create_model()
2023-12-10 13:46:03,793:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000223011AEFD0>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=4477, verbose=0, warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-10 13:46:03,793:INFO:Checking exceptions
2023-12-10 13:46:03,794:INFO:Importing libraries
2023-12-10 13:46:03,794:INFO:Copying training dataset
2023-12-10 13:46:03,798:INFO:Defining folds
2023-12-10 13:46:03,798:INFO:Declaring metric variables
2023-12-10 13:46:03,798:INFO:Importing untrained model
2023-12-10 13:46:03,798:INFO:Declaring custom model
2023-12-10 13:46:03,798:INFO:Extra Trees Classifier Imported successfully
2023-12-10 13:46:03,799:INFO:Cross validation set to False
2023-12-10 13:46:03,799:INFO:Fitting Model
2023-12-10 13:46:04,089:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=4477, verbose=0, warm_start=False)
2023-12-10 13:46:04,089:INFO:create_model() successfully completed......................................
2023-12-10 13:46:04,159:INFO:_master_model_container: 14
2023-12-10 13:46:04,159:INFO:_display_container: 2
2023-12-10 13:46:04,159:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=4477, verbose=0, warm_start=False)
2023-12-10 13:46:04,160:INFO:compare_models() successfully completed......................................
2023-12-10 13:46:04,185:INFO:Initializing save_model()
2023-12-10 13:46:04,185:INFO:save_model(model=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=4477, verbose=0, warm_start=False), model_name=best_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\MD\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['amount_deposited_via_counter',
                                             'amount_deposited_via_card',
                                             'balance_on_complaign_date',
                                             'restaurant_poin...
                 TransformerWrapper(exclude=None,
                                    include=['customer_registration_number',
                                             'transaction_date',
                                             'complaint_date'],
                                    transformer=TargetEncoder(cols=['customer_registration_number',
                                                                    'transaction_date',
                                                                    'complaint_date'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2023-12-10 13:46:04,185:INFO:Adding model into prep_pipe
2023-12-10 13:46:04,231:INFO:best_model.pkl saved in current working directory
2023-12-10 13:46:04,258:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['amount_deposited_via_counter',
                                             'amount_deposited_via_card',
                                             'balance_on_complaign_date',
                                             'restaurant_points', 'fuel_points',
                                             'groceries_points',...
                 ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0,
                                      class_weight=None, criterion='gini',
                                      max_depth=None, max_features='sqrt',
                                      max_leaf_nodes=None, max_samples=None,
                                      min_impurity_decrease=0.0,
                                      min_samples_leaf=1, min_samples_split=2,
                                      min_weight_fraction_leaf=0.0,
                                      n_estimators=100, n_jobs=-1,
                                      oob_score=False, random_state=4477,
                                      verbose=0, warm_start=False))],
         verbose=False)
2023-12-10 13:46:04,258:INFO:save_model() successfully completed......................................
2023-12-10 13:53:13,431:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 13:53:13,431:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 13:53:13,431:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 13:53:13,431:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 13:55:16,877:INFO:PyCaret ClassificationExperiment
2023-12-10 13:55:16,877:INFO:Logging name: clf-default-name
2023-12-10 13:55:16,878:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-12-10 13:55:16,878:INFO:version 3.2.0
2023-12-10 13:55:16,878:INFO:Initializing setup()
2023-12-10 13:55:16,878:INFO:self.USI: fb87
2023-12-10 13:55:16,878:INFO:self._variable_keys: {'X_test', 'n_jobs_param', 'idx', 'exp_id', 'y', 'fold_generator', 'fold_groups_param', 'fold_shuffle_param', 'html_param', 'X_train', 'memory', 'gpu_param', 'target_param', '_ml_usecase', 'USI', 'y_test', 'log_plots_param', 'seed', 'gpu_n_jobs_param', 'data', 'exp_name_log', 'fix_imbalance', 'logging_param', '_available_plots', 'X', 'y_train', 'is_multiclass', 'pipeline'}
2023-12-10 13:55:16,878:INFO:Checking environment
2023-12-10 13:55:16,878:INFO:python_version: 3.11.5
2023-12-10 13:55:16,878:INFO:python_build: ('main', 'Aug 27 2023 03:23:48')
2023-12-10 13:55:16,878:INFO:machine: AMD64
2023-12-10 13:55:16,885:INFO:platform: Windows-10-10.0.22621-SP0
2023-12-10 13:55:16,889:INFO:Memory: svmem(total=68447969280, available=47517155328, percent=30.6, used=20930813952, free=47517155328)
2023-12-10 13:55:16,889:INFO:Physical Core: 16
2023-12-10 13:55:16,889:INFO:Logical Core: 24
2023-12-10 13:55:16,889:INFO:Checking libraries
2023-12-10 13:55:16,889:INFO:System:
2023-12-10 13:55:16,889:INFO:    python: 3.11.5 | packaged by conda-forge | (main, Aug 27 2023, 03:23:48) [MSC v.1936 64 bit (AMD64)]
2023-12-10 13:55:16,889:INFO:executable: C:\Users\MD\anaconda3\envs\nmb-ml\python.exe
2023-12-10 13:55:16,889:INFO:   machine: Windows-10-10.0.22621-SP0
2023-12-10 13:55:16,889:INFO:PyCaret required dependencies:
2023-12-10 13:55:16,899:INFO:                 pip: 23.3.1
2023-12-10 13:55:16,899:INFO:          setuptools: 68.2.2
2023-12-10 13:55:16,899:INFO:             pycaret: 3.2.0
2023-12-10 13:55:16,899:INFO:             IPython: 8.18.1
2023-12-10 13:55:16,899:INFO:          ipywidgets: 8.1.1
2023-12-10 13:55:16,899:INFO:                tqdm: 4.66.1
2023-12-10 13:55:16,899:INFO:               numpy: 1.25.2
2023-12-10 13:55:16,899:INFO:              pandas: 1.5.3
2023-12-10 13:55:16,899:INFO:              jinja2: 3.1.2
2023-12-10 13:55:16,899:INFO:               scipy: 1.10.1
2023-12-10 13:55:16,899:INFO:              joblib: 1.1.1
2023-12-10 13:55:16,899:INFO:             sklearn: 1.2.2
2023-12-10 13:55:16,899:INFO:                pyod: 1.1.2
2023-12-10 13:55:16,899:INFO:            imblearn: 0.11.0
2023-12-10 13:55:16,899:INFO:   category_encoders: 2.6.3
2023-12-10 13:55:16,899:INFO:            lightgbm: 4.1.0
2023-12-10 13:55:16,899:INFO:               numba: 0.58.1
2023-12-10 13:55:16,899:INFO:            requests: 2.31.0
2023-12-10 13:55:16,899:INFO:          matplotlib: 3.6.0
2023-12-10 13:55:16,899:INFO:          scikitplot: 0.3.7
2023-12-10 13:55:16,899:INFO:         yellowbrick: 1.5
2023-12-10 13:55:16,899:INFO:              plotly: 5.18.0
2023-12-10 13:55:16,899:INFO:    plotly-resampler: Not installed
2023-12-10 13:55:16,899:INFO:             kaleido: 0.2.1
2023-12-10 13:55:16,899:INFO:           schemdraw: 0.15
2023-12-10 13:55:16,899:INFO:         statsmodels: 0.14.0
2023-12-10 13:55:16,899:INFO:              sktime: 0.21.1
2023-12-10 13:55:16,899:INFO:               tbats: 1.1.3
2023-12-10 13:55:16,899:INFO:            pmdarima: 2.0.4
2023-12-10 13:55:16,899:INFO:              psutil: 5.9.5
2023-12-10 13:55:16,900:INFO:          markupsafe: 2.1.3
2023-12-10 13:55:16,900:INFO:             pickle5: Not installed
2023-12-10 13:55:16,900:INFO:         cloudpickle: 3.0.0
2023-12-10 13:55:16,900:INFO:         deprecation: 2.1.0
2023-12-10 13:55:16,900:INFO:              xxhash: 3.4.1
2023-12-10 13:55:16,900:INFO:           wurlitzer: Not installed
2023-12-10 13:55:16,900:INFO:PyCaret optional dependencies:
2023-12-10 13:55:16,904:INFO:                shap: Not installed
2023-12-10 13:55:16,904:INFO:           interpret: Not installed
2023-12-10 13:55:16,904:INFO:                umap: Not installed
2023-12-10 13:55:16,904:INFO:     ydata_profiling: 4.6.3
2023-12-10 13:55:16,904:INFO:  explainerdashboard: Not installed
2023-12-10 13:55:16,904:INFO:             autoviz: Not installed
2023-12-10 13:55:16,904:INFO:           fairlearn: Not installed
2023-12-10 13:55:16,904:INFO:          deepchecks: Not installed
2023-12-10 13:55:16,904:INFO:             xgboost: Not installed
2023-12-10 13:55:16,904:INFO:            catboost: Not installed
2023-12-10 13:55:16,904:INFO:              kmodes: Not installed
2023-12-10 13:55:16,904:INFO:             mlxtend: Not installed
2023-12-10 13:55:16,905:INFO:       statsforecast: Not installed
2023-12-10 13:55:16,905:INFO:        tune_sklearn: Not installed
2023-12-10 13:55:16,905:INFO:                 ray: Not installed
2023-12-10 13:55:16,905:INFO:            hyperopt: Not installed
2023-12-10 13:55:16,905:INFO:              optuna: Not installed
2023-12-10 13:55:16,905:INFO:               skopt: Not installed
2023-12-10 13:55:16,905:INFO:              mlflow: Not installed
2023-12-10 13:55:16,905:INFO:              gradio: Not installed
2023-12-10 13:55:16,905:INFO:             fastapi: Not installed
2023-12-10 13:55:16,905:INFO:             uvicorn: Not installed
2023-12-10 13:55:16,905:INFO:              m2cgen: Not installed
2023-12-10 13:55:16,905:INFO:           evidently: Not installed
2023-12-10 13:55:16,905:INFO:               fugue: Not installed
2023-12-10 13:55:16,905:INFO:           streamlit: 1.29.0
2023-12-10 13:55:16,905:INFO:             prophet: Not installed
2023-12-10 13:55:16,905:INFO:None
2023-12-10 13:55:16,905:INFO:Set up data.
2023-12-10 13:55:16,931:INFO:Set up folding strategy.
2023-12-10 13:55:16,931:INFO:Set up train/test split.
2023-12-10 13:55:16,948:INFO:Set up index.
2023-12-10 13:55:16,949:INFO:Assigning column types.
2023-12-10 13:55:16,951:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-12-10 13:55:16,971:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-12-10 13:55:16,972:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-12-10 13:55:16,988:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:55:16,988:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:55:17,008:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-12-10 13:55:17,008:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-12-10 13:55:17,020:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:55:17,020:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:55:17,020:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-12-10 13:55:17,041:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-12-10 13:55:17,052:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:55:17,053:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:55:17,073:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-12-10 13:55:17,085:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:55:17,085:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:55:17,085:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2023-12-10 13:55:17,117:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:55:17,117:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:55:17,149:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:55:17,149:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:55:17,150:INFO:Preparing preprocessing pipeline...
2023-12-10 13:55:17,151:INFO:Set up label encoding.
2023-12-10 13:55:17,151:INFO:Set up simple imputation.
2023-12-10 13:55:17,155:INFO:Set up encoding of ordinal features.
2023-12-10 13:55:17,159:INFO:Set up encoding of categorical features.
2023-12-10 13:55:17,418:INFO:Finished creating preprocessing pipeline.
2023-12-10 13:55:17,442:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\MD\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['amount_deposited_via_counter',
                                             'amount_deposited_via_card',
                                             'balance_on_complaign_date',
                                             'restaurant_poin...
                 TransformerWrapper(exclude=None,
                                    include=['customer_registration_number',
                                             'transaction_date',
                                             'complaint_date'],
                                    transformer=TargetEncoder(cols=['customer_registration_number',
                                                                    'transaction_date',
                                                                    'complaint_date'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0)))],
         verbose=False)
2023-12-10 13:55:17,442:INFO:Creating final display dataframe.
2023-12-10 13:55:17,936:INFO:Setup _display_container:                     Description             Value
0                    Session id              1861
1                        Target        complained
2                   Target type            Binary
3                Target mapping     NO: 0, YES: 1
4           Original data shape       (31924, 22)
5        Transformed data shape       (31924, 50)
6   Transformed train set shape       (22346, 50)
7    Transformed test set shape        (9578, 50)
8              Ordinal features                 4
9              Numeric features                12
10         Categorical features                 9
11     Rows with missing values             17.1%
12                   Preprocess              True
13              Imputation type            simple
14           Numeric imputation              mean
15       Categorical imputation              mode
16     Maximum one-hot encoding                25
17              Encoding method              None
18               Fold Generator   StratifiedKFold
19                  Fold Number                10
20                     CPU Jobs                -1
21                      Use GPU             False
22               Log Experiment             False
23              Experiment Name  clf-default-name
24                          USI              fb87
2023-12-10 13:55:17,973:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:55:17,973:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:55:18,006:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:55:18,006:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:55:18,006:INFO:setup() successfully completed in 1.13s...............
2023-12-10 13:55:18,008:INFO:Initializing compare_models()
2023-12-10 13:55:18,008:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A9A4046C90>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001A9A4046C90>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2023-12-10 13:55:18,008:INFO:Checking exceptions
2023-12-10 13:55:18,011:INFO:Preparing display monitor
2023-12-10 13:55:18,013:INFO:Initializing Logistic Regression
2023-12-10 13:55:18,013:INFO:Total runtime is 0.0 minutes
2023-12-10 13:55:18,013:INFO:SubProcess create_model() called ==================================
2023-12-10 13:55:18,013:INFO:Initializing create_model()
2023-12-10 13:55:18,013:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A9A4046C90>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A9A45EEA90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-10 13:55:18,013:INFO:Checking exceptions
2023-12-10 13:55:18,013:INFO:Importing libraries
2023-12-10 13:55:18,013:INFO:Copying training dataset
2023-12-10 13:55:18,018:INFO:Defining folds
2023-12-10 13:55:18,019:INFO:Declaring metric variables
2023-12-10 13:55:18,019:INFO:Importing untrained model
2023-12-10 13:55:18,019:INFO:Logistic Regression Imported successfully
2023-12-10 13:55:18,019:INFO:Starting cross validation
2023-12-10 13:55:18,020:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-10 13:55:20,266:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:20,274:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:20,282:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:20,287:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:20,295:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:20,303:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:20,333:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:20,341:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:20,349:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:20,350:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:20,358:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:20,360:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:20,366:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:20,368:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:20,368:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:20,370:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:20,374:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:20,375:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:20,376:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:20,377:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:20,378:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:20,382:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:20,383:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:20,386:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:20,388:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:20,390:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:20,397:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:20,401:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:20,409:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:20,417:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:20,429:INFO:Calculating mean and std
2023-12-10 13:55:20,429:INFO:Creating metrics dataframe
2023-12-10 13:55:20,430:INFO:Uploading results into container
2023-12-10 13:55:20,431:INFO:Uploading model into container now
2023-12-10 13:55:20,431:INFO:_master_model_container: 1
2023-12-10 13:55:20,431:INFO:_display_container: 2
2023-12-10 13:55:20,431:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1861, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2023-12-10 13:55:20,431:INFO:create_model() successfully completed......................................
2023-12-10 13:55:20,482:INFO:SubProcess create_model() end ==================================
2023-12-10 13:55:20,482:INFO:Creating metrics dataframe
2023-12-10 13:55:20,484:INFO:Initializing K Neighbors Classifier
2023-12-10 13:55:20,484:INFO:Total runtime is 0.04118333260218302 minutes
2023-12-10 13:55:20,484:INFO:SubProcess create_model() called ==================================
2023-12-10 13:55:20,485:INFO:Initializing create_model()
2023-12-10 13:55:20,485:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A9A4046C90>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A9A45EEA90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-10 13:55:20,485:INFO:Checking exceptions
2023-12-10 13:55:20,485:INFO:Importing libraries
2023-12-10 13:55:20,485:INFO:Copying training dataset
2023-12-10 13:55:20,488:INFO:Defining folds
2023-12-10 13:55:20,489:INFO:Declaring metric variables
2023-12-10 13:55:20,489:INFO:Importing untrained model
2023-12-10 13:55:20,489:INFO:K Neighbors Classifier Imported successfully
2023-12-10 13:55:20,489:INFO:Starting cross validation
2023-12-10 13:55:20,490:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-10 13:55:23,131:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:23,133:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:23,139:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:23,142:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:23,145:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:23,146:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:23,154:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:23,154:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:23,163:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:23,179:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:23,180:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:23,187:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:23,189:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:23,195:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:23,197:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:23,204:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:23,211:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:23,219:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:23,221:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:23,226:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:23,229:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:23,229:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:23,234:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:23,236:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:23,239:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:23,242:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:23,245:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:23,247:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:23,253:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:23,261:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:23,272:INFO:Calculating mean and std
2023-12-10 13:55:23,273:INFO:Creating metrics dataframe
2023-12-10 13:55:23,274:INFO:Uploading results into container
2023-12-10 13:55:23,275:INFO:Uploading model into container now
2023-12-10 13:55:23,275:INFO:_master_model_container: 2
2023-12-10 13:55:23,275:INFO:_display_container: 2
2023-12-10 13:55:23,275:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2023-12-10 13:55:23,275:INFO:create_model() successfully completed......................................
2023-12-10 13:55:23,327:INFO:SubProcess create_model() end ==================================
2023-12-10 13:55:23,327:INFO:Creating metrics dataframe
2023-12-10 13:55:23,329:INFO:Initializing Naive Bayes
2023-12-10 13:55:23,329:INFO:Total runtime is 0.0886000156402588 minutes
2023-12-10 13:55:23,330:INFO:SubProcess create_model() called ==================================
2023-12-10 13:55:23,330:INFO:Initializing create_model()
2023-12-10 13:55:23,330:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A9A4046C90>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A9A45EEA90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-10 13:55:23,330:INFO:Checking exceptions
2023-12-10 13:55:23,330:INFO:Importing libraries
2023-12-10 13:55:23,330:INFO:Copying training dataset
2023-12-10 13:55:23,334:INFO:Defining folds
2023-12-10 13:55:23,334:INFO:Declaring metric variables
2023-12-10 13:55:23,334:INFO:Importing untrained model
2023-12-10 13:55:23,334:INFO:Naive Bayes Imported successfully
2023-12-10 13:55:23,334:INFO:Starting cross validation
2023-12-10 13:55:23,335:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-10 13:55:23,657:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:23,660:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:23,666:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:23,666:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:23,672:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-10 13:55:23,673:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:23,676:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:23,676:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:23,677:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:23,680:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-10 13:55:23,683:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:23,683:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:23,685:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:23,686:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:23,691:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-10 13:55:23,694:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:23,694:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:23,696:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:23,702:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:23,704:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:23,712:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:24,973:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:24,975:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:24,977:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:24,978:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:24,980:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:24,983:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:24,985:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:24,985:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-10 13:55:24,985:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:24,987:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-10 13:55:24,988:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:24,989:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-10 13:55:24,990:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:24,992:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:24,993:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,004:INFO:Calculating mean and std
2023-12-10 13:55:25,005:INFO:Creating metrics dataframe
2023-12-10 13:55:25,006:INFO:Uploading results into container
2023-12-10 13:55:25,007:INFO:Uploading model into container now
2023-12-10 13:55:25,007:INFO:_master_model_container: 3
2023-12-10 13:55:25,007:INFO:_display_container: 2
2023-12-10 13:55:25,007:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2023-12-10 13:55:25,007:INFO:create_model() successfully completed......................................
2023-12-10 13:55:25,063:INFO:SubProcess create_model() end ==================================
2023-12-10 13:55:25,063:INFO:Creating metrics dataframe
2023-12-10 13:55:25,065:INFO:Initializing Decision Tree Classifier
2023-12-10 13:55:25,065:INFO:Total runtime is 0.11753334204355877 minutes
2023-12-10 13:55:25,066:INFO:SubProcess create_model() called ==================================
2023-12-10 13:55:25,066:INFO:Initializing create_model()
2023-12-10 13:55:25,066:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A9A4046C90>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A9A45EEA90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-10 13:55:25,066:INFO:Checking exceptions
2023-12-10 13:55:25,066:INFO:Importing libraries
2023-12-10 13:55:25,066:INFO:Copying training dataset
2023-12-10 13:55:25,069:INFO:Defining folds
2023-12-10 13:55:25,069:INFO:Declaring metric variables
2023-12-10 13:55:25,070:INFO:Importing untrained model
2023-12-10 13:55:25,070:INFO:Decision Tree Classifier Imported successfully
2023-12-10 13:55:25,070:INFO:Starting cross validation
2023-12-10 13:55:25,071:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-10 13:55:25,400:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,407:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,408:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,413:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,414:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,416:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,420:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,420:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,421:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,422:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,426:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,428:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,428:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,429:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,429:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,434:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,435:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,436:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,438:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,439:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,441:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,441:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,445:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,445:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,446:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,449:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,453:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,453:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,456:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,460:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,472:INFO:Calculating mean and std
2023-12-10 13:55:25,472:INFO:Creating metrics dataframe
2023-12-10 13:55:25,474:INFO:Uploading results into container
2023-12-10 13:55:25,474:INFO:Uploading model into container now
2023-12-10 13:55:25,474:INFO:_master_model_container: 4
2023-12-10 13:55:25,474:INFO:_display_container: 2
2023-12-10 13:55:25,474:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=1861, splitter='best')
2023-12-10 13:55:25,474:INFO:create_model() successfully completed......................................
2023-12-10 13:55:25,528:INFO:SubProcess create_model() end ==================================
2023-12-10 13:55:25,528:INFO:Creating metrics dataframe
2023-12-10 13:55:25,530:INFO:Initializing SVM - Linear Kernel
2023-12-10 13:55:25,530:INFO:Total runtime is 0.12528334458669027 minutes
2023-12-10 13:55:25,530:INFO:SubProcess create_model() called ==================================
2023-12-10 13:55:25,530:INFO:Initializing create_model()
2023-12-10 13:55:25,530:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A9A4046C90>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A9A45EEA90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-10 13:55:25,530:INFO:Checking exceptions
2023-12-10 13:55:25,531:INFO:Importing libraries
2023-12-10 13:55:25,531:INFO:Copying training dataset
2023-12-10 13:55:25,535:INFO:Defining folds
2023-12-10 13:55:25,535:INFO:Declaring metric variables
2023-12-10 13:55:25,535:INFO:Importing untrained model
2023-12-10 13:55:25,535:INFO:SVM - Linear Kernel Imported successfully
2023-12-10 13:55:25,535:INFO:Starting cross validation
2023-12-10 13:55:25,536:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-10 13:55:25,834:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-12-10 13:55:25,837:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-12-10 13:55:25,838:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,839:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-12-10 13:55:25,841:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,842:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-12-10 13:55:25,842:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,846:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,846:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,849:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,851:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,854:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,855:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,857:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,862:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,863:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,885:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-12-10 13:55:25,888:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-12-10 13:55:25,888:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,892:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,895:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-12-10 13:55:25,896:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-12-10 13:55:25,896:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,897:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-12-10 13:55:25,899:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,899:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,899:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,901:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,904:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,906:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,907:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,907:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,908:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,914:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,915:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,916:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,919:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-12-10 13:55:25,923:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,930:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,938:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:25,949:INFO:Calculating mean and std
2023-12-10 13:55:25,950:INFO:Creating metrics dataframe
2023-12-10 13:55:25,951:INFO:Uploading results into container
2023-12-10 13:55:25,951:INFO:Uploading model into container now
2023-12-10 13:55:25,952:INFO:_master_model_container: 5
2023-12-10 13:55:25,952:INFO:_display_container: 2
2023-12-10 13:55:25,952:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=1861, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2023-12-10 13:55:25,952:INFO:create_model() successfully completed......................................
2023-12-10 13:55:26,002:INFO:SubProcess create_model() end ==================================
2023-12-10 13:55:26,002:INFO:Creating metrics dataframe
2023-12-10 13:55:26,005:INFO:Initializing Ridge Classifier
2023-12-10 13:55:26,005:INFO:Total runtime is 0.1331997036933899 minutes
2023-12-10 13:55:26,005:INFO:SubProcess create_model() called ==================================
2023-12-10 13:55:26,005:INFO:Initializing create_model()
2023-12-10 13:55:26,005:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A9A4046C90>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A9A45EEA90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-10 13:55:26,005:INFO:Checking exceptions
2023-12-10 13:55:26,005:INFO:Importing libraries
2023-12-10 13:55:26,005:INFO:Copying training dataset
2023-12-10 13:55:26,009:INFO:Defining folds
2023-12-10 13:55:26,009:INFO:Declaring metric variables
2023-12-10 13:55:26,009:INFO:Importing untrained model
2023-12-10 13:55:26,009:INFO:Ridge Classifier Imported successfully
2023-12-10 13:55:26,009:INFO:Starting cross validation
2023-12-10 13:55:26,010:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-10 13:55:26,264:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.91139e-22): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2023-12-10 13:55:26,273:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.91259e-22): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2023-12-10 13:55:26,278:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.91578e-22): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2023-12-10 13:55:26,290:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.91268e-22): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2023-12-10 13:55:26,298:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.91319e-22): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2023-12-10 13:55:26,299:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-12-10 13:55:26,303:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:26,309:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-12-10 13:55:26,311:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:26,313:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:26,318:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:26,319:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-12-10 13:55:26,321:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.95566e-22): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2023-12-10 13:55:26,322:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:26,324:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:26,326:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.91268e-22): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2023-12-10 13:55:26,329:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.91266e-22): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2023-12-10 13:55:26,330:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:26,331:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-12-10 13:55:26,335:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:26,336:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:26,337:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-12-10 13:55:26,338:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:26,339:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.91246e-22): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2023-12-10 13:55:26,341:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:26,344:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:26,348:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:26,352:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:26,356:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:26,357:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.0999e-21): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2023-12-10 13:55:26,358:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-12-10 13:55:26,360:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-12-10 13:55:26,360:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-12-10 13:55:26,362:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:26,363:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:26,364:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:26,369:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:26,369:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-12-10 13:55:26,371:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:26,371:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:26,373:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:26,377:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:26,378:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:26,379:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:26,380:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:26,386:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-12-10 13:55:26,388:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:26,390:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:26,397:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:26,405:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:26,416:INFO:Calculating mean and std
2023-12-10 13:55:26,416:INFO:Creating metrics dataframe
2023-12-10 13:55:26,418:INFO:Uploading results into container
2023-12-10 13:55:26,418:INFO:Uploading model into container now
2023-12-10 13:55:26,418:INFO:_master_model_container: 6
2023-12-10 13:55:26,418:INFO:_display_container: 2
2023-12-10 13:55:26,418:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=1861, solver='auto',
                tol=0.0001)
2023-12-10 13:55:26,418:INFO:create_model() successfully completed......................................
2023-12-10 13:55:26,474:INFO:SubProcess create_model() end ==================================
2023-12-10 13:55:26,474:INFO:Creating metrics dataframe
2023-12-10 13:55:26,476:INFO:Initializing Random Forest Classifier
2023-12-10 13:55:26,476:INFO:Total runtime is 0.14104969501495362 minutes
2023-12-10 13:55:26,477:INFO:SubProcess create_model() called ==================================
2023-12-10 13:55:26,477:INFO:Initializing create_model()
2023-12-10 13:55:26,477:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A9A4046C90>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A9A45EEA90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-10 13:55:26,477:INFO:Checking exceptions
2023-12-10 13:55:26,477:INFO:Importing libraries
2023-12-10 13:55:26,477:INFO:Copying training dataset
2023-12-10 13:55:26,480:INFO:Defining folds
2023-12-10 13:55:26,480:INFO:Declaring metric variables
2023-12-10 13:55:26,481:INFO:Importing untrained model
2023-12-10 13:55:26,481:INFO:Random Forest Classifier Imported successfully
2023-12-10 13:55:26,481:INFO:Starting cross validation
2023-12-10 13:55:26,482:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-10 13:55:27,085:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,097:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,108:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,145:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,157:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,157:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,163:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,170:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,174:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,182:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,185:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,208:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,242:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,254:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,256:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,265:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,267:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,282:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,283:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,294:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,303:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,318:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,326:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,333:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,364:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,372:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,380:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,380:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,387:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,395:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,406:INFO:Calculating mean and std
2023-12-10 13:55:27,407:INFO:Creating metrics dataframe
2023-12-10 13:55:27,408:INFO:Uploading results into container
2023-12-10 13:55:27,408:INFO:Uploading model into container now
2023-12-10 13:55:27,409:INFO:_master_model_container: 7
2023-12-10 13:55:27,409:INFO:_display_container: 2
2023-12-10 13:55:27,409:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=1861, verbose=0, warm_start=False)
2023-12-10 13:55:27,409:INFO:create_model() successfully completed......................................
2023-12-10 13:55:27,461:INFO:SubProcess create_model() end ==================================
2023-12-10 13:55:27,461:INFO:Creating metrics dataframe
2023-12-10 13:55:27,463:INFO:Initializing Quadratic Discriminant Analysis
2023-12-10 13:55:27,463:INFO:Total runtime is 0.15749970277150474 minutes
2023-12-10 13:55:27,463:INFO:SubProcess create_model() called ==================================
2023-12-10 13:55:27,463:INFO:Initializing create_model()
2023-12-10 13:55:27,463:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A9A4046C90>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A9A45EEA90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-10 13:55:27,463:INFO:Checking exceptions
2023-12-10 13:55:27,463:INFO:Importing libraries
2023-12-10 13:55:27,463:INFO:Copying training dataset
2023-12-10 13:55:27,467:INFO:Defining folds
2023-12-10 13:55:27,467:INFO:Declaring metric variables
2023-12-10 13:55:27,467:INFO:Importing untrained model
2023-12-10 13:55:27,467:INFO:Quadratic Discriminant Analysis Imported successfully
2023-12-10 13:55:27,467:INFO:Starting cross validation
2023-12-10 13:55:27,468:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-10 13:55:27,728:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-12-10 13:55:27,736:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-12-10 13:55:27,746:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-12-10 13:55:27,762:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-12-10 13:55:27,762:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-12-10 13:55:27,772:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-12-10 13:55:27,773:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-12-10 13:55:27,777:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-12-10 13:55:27,794:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,795:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-12-10 13:55:27,800:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,806:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,808:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,816:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,818:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,820:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,822:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,826:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,827:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,830:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,832:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-12-10 13:55:27,834:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,834:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,835:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,838:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,843:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,843:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,847:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,852:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,854:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,857:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,862:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,865:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,869:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,873:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,877:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,884:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,888:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,895:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,903:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:27,914:INFO:Calculating mean and std
2023-12-10 13:55:27,914:INFO:Creating metrics dataframe
2023-12-10 13:55:27,916:INFO:Uploading results into container
2023-12-10 13:55:27,916:INFO:Uploading model into container now
2023-12-10 13:55:27,916:INFO:_master_model_container: 8
2023-12-10 13:55:27,916:INFO:_display_container: 2
2023-12-10 13:55:27,916:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2023-12-10 13:55:27,916:INFO:create_model() successfully completed......................................
2023-12-10 13:55:27,971:INFO:SubProcess create_model() end ==================================
2023-12-10 13:55:27,971:INFO:Creating metrics dataframe
2023-12-10 13:55:27,974:INFO:Initializing Ada Boost Classifier
2023-12-10 13:55:27,974:INFO:Total runtime is 0.16601173877716066 minutes
2023-12-10 13:55:27,974:INFO:SubProcess create_model() called ==================================
2023-12-10 13:55:27,974:INFO:Initializing create_model()
2023-12-10 13:55:27,974:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A9A4046C90>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A9A45EEA90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-10 13:55:27,974:INFO:Checking exceptions
2023-12-10 13:55:27,974:INFO:Importing libraries
2023-12-10 13:55:27,974:INFO:Copying training dataset
2023-12-10 13:55:27,978:INFO:Defining folds
2023-12-10 13:55:27,978:INFO:Declaring metric variables
2023-12-10 13:55:27,978:INFO:Importing untrained model
2023-12-10 13:55:27,978:INFO:Ada Boost Classifier Imported successfully
2023-12-10 13:55:27,978:INFO:Starting cross validation
2023-12-10 13:55:27,979:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-10 13:55:28,255:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:28,263:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:28,270:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:28,274:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:28,282:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:28,285:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:28,291:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:28,296:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:28,304:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:28,306:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:28,311:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:28,312:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:28,312:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:28,313:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:28,318:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:28,320:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:28,320:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:28,321:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:28,322:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:28,323:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:28,326:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:28,328:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:28,328:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:28,332:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:28,333:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:28,336:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:28,338:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:28,345:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:28,352:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:28,360:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:28,370:INFO:Calculating mean and std
2023-12-10 13:55:28,371:INFO:Creating metrics dataframe
2023-12-10 13:55:28,372:INFO:Uploading results into container
2023-12-10 13:55:28,372:INFO:Uploading model into container now
2023-12-10 13:55:28,372:INFO:_master_model_container: 9
2023-12-10 13:55:28,372:INFO:_display_container: 2
2023-12-10 13:55:28,373:INFO:AdaBoostClassifier(algorithm='SAMME.R', base_estimator='deprecated',
                   estimator=None, learning_rate=1.0, n_estimators=50,
                   random_state=1861)
2023-12-10 13:55:28,373:INFO:create_model() successfully completed......................................
2023-12-10 13:55:28,424:INFO:SubProcess create_model() end ==================================
2023-12-10 13:55:28,424:INFO:Creating metrics dataframe
2023-12-10 13:55:28,427:INFO:Initializing Gradient Boosting Classifier
2023-12-10 13:55:28,427:INFO:Total runtime is 0.17356173594792684 minutes
2023-12-10 13:55:28,427:INFO:SubProcess create_model() called ==================================
2023-12-10 13:55:28,427:INFO:Initializing create_model()
2023-12-10 13:55:28,427:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A9A4046C90>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A9A45EEA90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-10 13:55:28,427:INFO:Checking exceptions
2023-12-10 13:55:28,427:INFO:Importing libraries
2023-12-10 13:55:28,427:INFO:Copying training dataset
2023-12-10 13:55:28,431:INFO:Defining folds
2023-12-10 13:55:28,431:INFO:Declaring metric variables
2023-12-10 13:55:28,431:INFO:Importing untrained model
2023-12-10 13:55:28,431:INFO:Gradient Boosting Classifier Imported successfully
2023-12-10 13:55:28,431:INFO:Starting cross validation
2023-12-10 13:55:28,432:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-10 13:55:29,771:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:29,775:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:29,779:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:29,784:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:29,786:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:29,791:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:29,794:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:29,804:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:29,804:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:29,812:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:29,812:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:29,819:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:29,832:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:29,839:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:29,846:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:29,849:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:29,852:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:29,854:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:29,860:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:29,861:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:29,868:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:29,894:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:29,902:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:29,908:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:29,909:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:29,914:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:29,915:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:29,922:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:29,923:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:29,930:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:29,941:INFO:Calculating mean and std
2023-12-10 13:55:29,941:INFO:Creating metrics dataframe
2023-12-10 13:55:29,942:INFO:Uploading results into container
2023-12-10 13:55:29,943:INFO:Uploading model into container now
2023-12-10 13:55:29,943:INFO:_master_model_container: 10
2023-12-10 13:55:29,943:INFO:_display_container: 2
2023-12-10 13:55:29,943:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=1861, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2023-12-10 13:55:29,943:INFO:create_model() successfully completed......................................
2023-12-10 13:55:29,997:INFO:SubProcess create_model() end ==================================
2023-12-10 13:55:29,997:INFO:Creating metrics dataframe
2023-12-10 13:55:29,999:INFO:Initializing Linear Discriminant Analysis
2023-12-10 13:55:29,999:INFO:Total runtime is 0.1997617284456889 minutes
2023-12-10 13:55:29,999:INFO:SubProcess create_model() called ==================================
2023-12-10 13:55:29,999:INFO:Initializing create_model()
2023-12-10 13:55:29,999:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A9A4046C90>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A9A45EEA90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-10 13:55:29,999:INFO:Checking exceptions
2023-12-10 13:55:29,999:INFO:Importing libraries
2023-12-10 13:55:29,999:INFO:Copying training dataset
2023-12-10 13:55:30,003:INFO:Defining folds
2023-12-10 13:55:30,003:INFO:Declaring metric variables
2023-12-10 13:55:30,003:INFO:Importing untrained model
2023-12-10 13:55:30,003:INFO:Linear Discriminant Analysis Imported successfully
2023-12-10 13:55:30,003:INFO:Starting cross validation
2023-12-10 13:55:30,004:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-10 13:55:30,327:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:30,335:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:30,344:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:30,354:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:30,362:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:30,371:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:30,374:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:30,377:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:30,380:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:30,382:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:30,385:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:30,386:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:30,387:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:30,390:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:30,392:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:30,393:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:30,394:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:30,395:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:30,400:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:30,401:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:30,403:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:30,405:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:30,408:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:30,412:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:30,413:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:30,420:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:30,420:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:30,428:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:30,435:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:30,443:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:30,454:INFO:Calculating mean and std
2023-12-10 13:55:30,454:INFO:Creating metrics dataframe
2023-12-10 13:55:30,455:INFO:Uploading results into container
2023-12-10 13:55:30,456:INFO:Uploading model into container now
2023-12-10 13:55:30,456:INFO:_master_model_container: 11
2023-12-10 13:55:30,456:INFO:_display_container: 2
2023-12-10 13:55:30,456:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2023-12-10 13:55:30,456:INFO:create_model() successfully completed......................................
2023-12-10 13:55:30,507:INFO:SubProcess create_model() end ==================================
2023-12-10 13:55:30,507:INFO:Creating metrics dataframe
2023-12-10 13:55:30,510:INFO:Initializing Extra Trees Classifier
2023-12-10 13:55:30,510:INFO:Total runtime is 0.20827839374542237 minutes
2023-12-10 13:55:30,510:INFO:SubProcess create_model() called ==================================
2023-12-10 13:55:30,510:INFO:Initializing create_model()
2023-12-10 13:55:30,510:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A9A4046C90>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A9A45EEA90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-10 13:55:30,510:INFO:Checking exceptions
2023-12-10 13:55:30,510:INFO:Importing libraries
2023-12-10 13:55:30,510:INFO:Copying training dataset
2023-12-10 13:55:30,513:INFO:Defining folds
2023-12-10 13:55:30,514:INFO:Declaring metric variables
2023-12-10 13:55:30,514:INFO:Importing untrained model
2023-12-10 13:55:30,514:INFO:Extra Trees Classifier Imported successfully
2023-12-10 13:55:30,514:INFO:Starting cross validation
2023-12-10 13:55:30,515:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-10 13:55:31,129:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:31,133:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:31,134:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:31,138:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:31,142:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:31,143:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:31,152:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:31,154:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:31,155:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:31,165:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:31,171:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:31,171:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:31,175:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:31,176:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:31,178:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:31,179:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:31,180:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:31,183:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:31,184:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:31,186:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:31,187:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:31,188:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:31,192:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:31,193:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:31,206:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:31,213:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:31,221:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:31,244:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:31,252:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:31,260:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:31,271:INFO:Calculating mean and std
2023-12-10 13:55:31,271:INFO:Creating metrics dataframe
2023-12-10 13:55:31,273:INFO:Uploading results into container
2023-12-10 13:55:31,273:INFO:Uploading model into container now
2023-12-10 13:55:31,274:INFO:_master_model_container: 12
2023-12-10 13:55:31,274:INFO:_display_container: 2
2023-12-10 13:55:31,274:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=1861, verbose=0, warm_start=False)
2023-12-10 13:55:31,274:INFO:create_model() successfully completed......................................
2023-12-10 13:55:31,325:INFO:SubProcess create_model() end ==================================
2023-12-10 13:55:31,325:INFO:Creating metrics dataframe
2023-12-10 13:55:31,328:INFO:Initializing Light Gradient Boosting Machine
2023-12-10 13:55:31,328:INFO:Total runtime is 0.2219117561976115 minutes
2023-12-10 13:55:31,328:INFO:SubProcess create_model() called ==================================
2023-12-10 13:55:31,328:INFO:Initializing create_model()
2023-12-10 13:55:31,328:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A9A4046C90>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A9A45EEA90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-10 13:55:31,328:INFO:Checking exceptions
2023-12-10 13:55:31,328:INFO:Importing libraries
2023-12-10 13:55:31,328:INFO:Copying training dataset
2023-12-10 13:55:31,332:INFO:Defining folds
2023-12-10 13:55:31,332:INFO:Declaring metric variables
2023-12-10 13:55:31,332:INFO:Importing untrained model
2023-12-10 13:55:31,333:INFO:Light Gradient Boosting Machine Imported successfully
2023-12-10 13:55:31,333:INFO:Starting cross validation
2023-12-10 13:55:31,333:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-10 13:55:31,916:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:31,925:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:31,934:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,009:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,021:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,023:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,027:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,033:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,035:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,039:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,046:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,051:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,055:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,059:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,067:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,071:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,076:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,078:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,081:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,085:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,089:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,097:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,100:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,109:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,132:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,133:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,140:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,141:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,149:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,150:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,162:INFO:Calculating mean and std
2023-12-10 13:55:32,163:INFO:Creating metrics dataframe
2023-12-10 13:55:32,166:INFO:Uploading results into container
2023-12-10 13:55:32,166:INFO:Uploading model into container now
2023-12-10 13:55:32,166:INFO:_master_model_container: 13
2023-12-10 13:55:32,166:INFO:_display_container: 2
2023-12-10 13:55:32,167:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=1861, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2023-12-10 13:55:32,167:INFO:create_model() successfully completed......................................
2023-12-10 13:55:32,246:INFO:SubProcess create_model() end ==================================
2023-12-10 13:55:32,247:INFO:Creating metrics dataframe
2023-12-10 13:55:32,249:INFO:Initializing Dummy Classifier
2023-12-10 13:55:32,249:INFO:Total runtime is 0.23726174036661785 minutes
2023-12-10 13:55:32,249:INFO:SubProcess create_model() called ==================================
2023-12-10 13:55:32,249:INFO:Initializing create_model()
2023-12-10 13:55:32,249:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A9A4046C90>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A9A45EEA90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-10 13:55:32,249:INFO:Checking exceptions
2023-12-10 13:55:32,249:INFO:Importing libraries
2023-12-10 13:55:32,249:INFO:Copying training dataset
2023-12-10 13:55:32,253:INFO:Defining folds
2023-12-10 13:55:32,253:INFO:Declaring metric variables
2023-12-10 13:55:32,253:INFO:Importing untrained model
2023-12-10 13:55:32,253:INFO:Dummy Classifier Imported successfully
2023-12-10 13:55:32,253:INFO:Starting cross validation
2023-12-10 13:55:32,254:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-10 13:55:32,535:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,535:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,540:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,542:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,543:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,545:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,547:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-10 13:55:32,548:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,548:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,550:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,551:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,552:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-10 13:55:32,552:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,552:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-10 13:55:32,555:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-10 13:55:32,556:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,556:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,556:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,558:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,560:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,560:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-10 13:55:32,564:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,564:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-10 13:55:32,567:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,571:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,579:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,580:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,583:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,583:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-10 13:55:32,584:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,586:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,587:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,590:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,591:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-10 13:55:32,592:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,594:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-10 13:55:32,595:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,596:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-10 13:55:32,598:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,599:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:55:32,610:INFO:Calculating mean and std
2023-12-10 13:55:32,610:INFO:Creating metrics dataframe
2023-12-10 13:55:32,611:INFO:Uploading results into container
2023-12-10 13:55:32,612:INFO:Uploading model into container now
2023-12-10 13:55:32,612:INFO:_master_model_container: 14
2023-12-10 13:55:32,612:INFO:_display_container: 2
2023-12-10 13:55:32,612:INFO:DummyClassifier(constant=None, random_state=1861, strategy='prior')
2023-12-10 13:55:32,612:INFO:create_model() successfully completed......................................
2023-12-10 13:55:32,661:INFO:SubProcess create_model() end ==================================
2023-12-10 13:55:32,661:INFO:Creating metrics dataframe
2023-12-10 13:55:32,664:INFO:Initializing create_model()
2023-12-10 13:55:32,664:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A9A4046C90>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=1861, verbose=0, warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-10 13:55:32,664:INFO:Checking exceptions
2023-12-10 13:55:32,664:INFO:Importing libraries
2023-12-10 13:55:32,664:INFO:Copying training dataset
2023-12-10 13:55:32,668:INFO:Defining folds
2023-12-10 13:55:32,669:INFO:Declaring metric variables
2023-12-10 13:55:32,669:INFO:Importing untrained model
2023-12-10 13:55:32,669:INFO:Declaring custom model
2023-12-10 13:55:32,669:INFO:Extra Trees Classifier Imported successfully
2023-12-10 13:55:32,670:INFO:Cross validation set to False
2023-12-10 13:55:32,670:INFO:Fitting Model
2023-12-10 13:55:32,949:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=1861, verbose=0, warm_start=False)
2023-12-10 13:55:32,949:INFO:create_model() successfully completed......................................
2023-12-10 13:55:33,005:INFO:_master_model_container: 14
2023-12-10 13:55:33,005:INFO:_display_container: 2
2023-12-10 13:55:33,005:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=1861, verbose=0, warm_start=False)
2023-12-10 13:55:33,005:INFO:compare_models() successfully completed......................................
2023-12-10 13:55:33,035:INFO:Initializing save_model()
2023-12-10 13:55:33,035:INFO:save_model(model=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=1861, verbose=0, warm_start=False), model_name=best_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\MD\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['amount_deposited_via_counter',
                                             'amount_deposited_via_card',
                                             'balance_on_complaign_date',
                                             'restaurant_poin...
                 TransformerWrapper(exclude=None,
                                    include=['customer_registration_number',
                                             'transaction_date',
                                             'complaint_date'],
                                    transformer=TargetEncoder(cols=['customer_registration_number',
                                                                    'transaction_date',
                                                                    'complaint_date'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2023-12-10 13:55:33,035:INFO:Adding model into prep_pipe
2023-12-10 13:55:33,065:INFO:best_model.pkl saved in current working directory
2023-12-10 13:55:33,087:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['amount_deposited_via_counter',
                                             'amount_deposited_via_card',
                                             'balance_on_complaign_date',
                                             'restaurant_points', 'fuel_points',
                                             'groceries_points',...
                 ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0,
                                      class_weight=None, criterion='gini',
                                      max_depth=None, max_features='sqrt',
                                      max_leaf_nodes=None, max_samples=None,
                                      min_impurity_decrease=0.0,
                                      min_samples_leaf=1, min_samples_split=2,
                                      min_weight_fraction_leaf=0.0,
                                      n_estimators=100, n_jobs=-1,
                                      oob_score=False, random_state=1861,
                                      verbose=0, warm_start=False))],
         verbose=False)
2023-12-10 13:55:33,087:INFO:save_model() successfully completed......................................
2023-12-10 13:57:01,905:INFO:PyCaret ClassificationExperiment
2023-12-10 13:57:01,905:INFO:Logging name: clf-default-name
2023-12-10 13:57:01,905:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-12-10 13:57:01,905:INFO:version 3.2.0
2023-12-10 13:57:01,905:INFO:Initializing setup()
2023-12-10 13:57:01,905:INFO:self.USI: 3c31
2023-12-10 13:57:01,905:INFO:self._variable_keys: {'X_test', 'n_jobs_param', 'idx', 'exp_id', 'y', 'fold_generator', 'fold_groups_param', 'fold_shuffle_param', 'html_param', 'X_train', 'memory', 'gpu_param', 'target_param', '_ml_usecase', 'USI', 'y_test', 'log_plots_param', 'seed', 'gpu_n_jobs_param', 'data', 'exp_name_log', 'fix_imbalance', 'logging_param', '_available_plots', 'X', 'y_train', 'is_multiclass', 'pipeline'}
2023-12-10 13:57:01,905:INFO:Checking environment
2023-12-10 13:57:01,905:INFO:python_version: 3.11.5
2023-12-10 13:57:01,905:INFO:python_build: ('main', 'Aug 27 2023 03:23:48')
2023-12-10 13:57:01,905:INFO:machine: AMD64
2023-12-10 13:57:01,905:INFO:platform: Windows-10-10.0.22621-SP0
2023-12-10 13:57:01,909:INFO:Memory: svmem(total=68447969280, available=44106883072, percent=35.6, used=24341086208, free=44106883072)
2023-12-10 13:57:01,909:INFO:Physical Core: 16
2023-12-10 13:57:01,909:INFO:Logical Core: 24
2023-12-10 13:57:01,909:INFO:Checking libraries
2023-12-10 13:57:01,909:INFO:System:
2023-12-10 13:57:01,909:INFO:    python: 3.11.5 | packaged by conda-forge | (main, Aug 27 2023, 03:23:48) [MSC v.1936 64 bit (AMD64)]
2023-12-10 13:57:01,909:INFO:executable: C:\Users\MD\anaconda3\envs\nmb-ml\python.exe
2023-12-10 13:57:01,909:INFO:   machine: Windows-10-10.0.22621-SP0
2023-12-10 13:57:01,909:INFO:PyCaret required dependencies:
2023-12-10 13:57:01,909:INFO:                 pip: 23.3.1
2023-12-10 13:57:01,909:INFO:          setuptools: 68.2.2
2023-12-10 13:57:01,909:INFO:             pycaret: 3.2.0
2023-12-10 13:57:01,909:INFO:             IPython: 8.18.1
2023-12-10 13:57:01,910:INFO:          ipywidgets: 8.1.1
2023-12-10 13:57:01,910:INFO:                tqdm: 4.66.1
2023-12-10 13:57:01,910:INFO:               numpy: 1.25.2
2023-12-10 13:57:01,910:INFO:              pandas: 1.5.3
2023-12-10 13:57:01,910:INFO:              jinja2: 3.1.2
2023-12-10 13:57:01,910:INFO:               scipy: 1.10.1
2023-12-10 13:57:01,910:INFO:              joblib: 1.1.1
2023-12-10 13:57:01,910:INFO:             sklearn: 1.2.2
2023-12-10 13:57:01,910:INFO:                pyod: 1.1.2
2023-12-10 13:57:01,911:INFO:            imblearn: 0.11.0
2023-12-10 13:57:01,911:INFO:   category_encoders: 2.6.3
2023-12-10 13:57:01,911:INFO:            lightgbm: 4.1.0
2023-12-10 13:57:01,911:INFO:               numba: 0.58.1
2023-12-10 13:57:01,911:INFO:            requests: 2.31.0
2023-12-10 13:57:01,911:INFO:          matplotlib: 3.6.0
2023-12-10 13:57:01,911:INFO:          scikitplot: 0.3.7
2023-12-10 13:57:01,911:INFO:         yellowbrick: 1.5
2023-12-10 13:57:01,911:INFO:              plotly: 5.18.0
2023-12-10 13:57:01,911:INFO:    plotly-resampler: Not installed
2023-12-10 13:57:01,911:INFO:             kaleido: 0.2.1
2023-12-10 13:57:01,911:INFO:           schemdraw: 0.15
2023-12-10 13:57:01,911:INFO:         statsmodels: 0.14.0
2023-12-10 13:57:01,911:INFO:              sktime: 0.21.1
2023-12-10 13:57:01,911:INFO:               tbats: 1.1.3
2023-12-10 13:57:01,911:INFO:            pmdarima: 2.0.4
2023-12-10 13:57:01,911:INFO:              psutil: 5.9.5
2023-12-10 13:57:01,911:INFO:          markupsafe: 2.1.3
2023-12-10 13:57:01,911:INFO:             pickle5: Not installed
2023-12-10 13:57:01,911:INFO:         cloudpickle: 3.0.0
2023-12-10 13:57:01,912:INFO:         deprecation: 2.1.0
2023-12-10 13:57:01,912:INFO:              xxhash: 3.4.1
2023-12-10 13:57:01,912:INFO:           wurlitzer: Not installed
2023-12-10 13:57:01,913:INFO:PyCaret optional dependencies:
2023-12-10 13:57:01,913:INFO:                shap: Not installed
2023-12-10 13:57:01,913:INFO:           interpret: Not installed
2023-12-10 13:57:01,913:INFO:                umap: Not installed
2023-12-10 13:57:01,913:INFO:     ydata_profiling: 4.6.3
2023-12-10 13:57:01,913:INFO:  explainerdashboard: Not installed
2023-12-10 13:57:01,914:INFO:             autoviz: Not installed
2023-12-10 13:57:01,914:INFO:           fairlearn: Not installed
2023-12-10 13:57:01,915:INFO:          deepchecks: Not installed
2023-12-10 13:57:01,915:INFO:             xgboost: Not installed
2023-12-10 13:57:01,915:INFO:            catboost: Not installed
2023-12-10 13:57:01,916:INFO:              kmodes: Not installed
2023-12-10 13:57:01,916:INFO:             mlxtend: Not installed
2023-12-10 13:57:01,918:INFO:       statsforecast: Not installed
2023-12-10 13:57:01,920:INFO:        tune_sklearn: Not installed
2023-12-10 13:57:01,920:INFO:                 ray: Not installed
2023-12-10 13:57:01,920:INFO:            hyperopt: Not installed
2023-12-10 13:57:01,920:INFO:              optuna: Not installed
2023-12-10 13:57:01,920:INFO:               skopt: Not installed
2023-12-10 13:57:01,921:INFO:              mlflow: Not installed
2023-12-10 13:57:01,921:INFO:              gradio: Not installed
2023-12-10 13:57:01,921:INFO:             fastapi: Not installed
2023-12-10 13:57:01,921:INFO:             uvicorn: Not installed
2023-12-10 13:57:01,921:INFO:              m2cgen: Not installed
2023-12-10 13:57:01,922:INFO:           evidently: Not installed
2023-12-10 13:57:01,922:INFO:               fugue: Not installed
2023-12-10 13:57:01,922:INFO:           streamlit: 1.29.0
2023-12-10 13:57:01,922:INFO:             prophet: Not installed
2023-12-10 13:57:01,922:INFO:None
2023-12-10 13:57:01,922:INFO:Set up data.
2023-12-10 13:57:01,951:INFO:Set up folding strategy.
2023-12-10 13:57:01,951:INFO:Set up train/test split.
2023-12-10 13:57:11,524:INFO:PyCaret ClassificationExperiment
2023-12-10 13:57:11,524:INFO:Logging name: clf-default-name
2023-12-10 13:57:11,524:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-12-10 13:57:11,524:INFO:version 3.2.0
2023-12-10 13:57:11,524:INFO:Initializing setup()
2023-12-10 13:57:11,524:INFO:self.USI: dd40
2023-12-10 13:57:11,524:INFO:self._variable_keys: {'X_test', 'n_jobs_param', 'idx', 'exp_id', 'y', 'fold_generator', 'fold_groups_param', 'fold_shuffle_param', 'html_param', 'X_train', 'memory', 'gpu_param', 'target_param', '_ml_usecase', 'USI', 'y_test', 'log_plots_param', 'seed', 'gpu_n_jobs_param', 'data', 'exp_name_log', 'fix_imbalance', 'logging_param', '_available_plots', 'X', 'y_train', 'is_multiclass', 'pipeline'}
2023-12-10 13:57:11,524:INFO:Checking environment
2023-12-10 13:57:11,524:INFO:python_version: 3.11.5
2023-12-10 13:57:11,524:INFO:python_build: ('main', 'Aug 27 2023 03:23:48')
2023-12-10 13:57:11,524:INFO:machine: AMD64
2023-12-10 13:57:11,524:INFO:platform: Windows-10-10.0.22621-SP0
2023-12-10 13:57:11,528:INFO:Memory: svmem(total=68447969280, available=44112347136, percent=35.6, used=24335622144, free=44112347136)
2023-12-10 13:57:11,528:INFO:Physical Core: 16
2023-12-10 13:57:11,528:INFO:Logical Core: 24
2023-12-10 13:57:11,528:INFO:Checking libraries
2023-12-10 13:57:11,528:INFO:System:
2023-12-10 13:57:11,528:INFO:    python: 3.11.5 | packaged by conda-forge | (main, Aug 27 2023, 03:23:48) [MSC v.1936 64 bit (AMD64)]
2023-12-10 13:57:11,528:INFO:executable: C:\Users\MD\anaconda3\envs\nmb-ml\python.exe
2023-12-10 13:57:11,528:INFO:   machine: Windows-10-10.0.22621-SP0
2023-12-10 13:57:11,528:INFO:PyCaret required dependencies:
2023-12-10 13:57:11,528:INFO:                 pip: 23.3.1
2023-12-10 13:57:11,528:INFO:          setuptools: 68.2.2
2023-12-10 13:57:11,528:INFO:             pycaret: 3.2.0
2023-12-10 13:57:11,529:INFO:             IPython: 8.18.1
2023-12-10 13:57:11,529:INFO:          ipywidgets: 8.1.1
2023-12-10 13:57:11,529:INFO:                tqdm: 4.66.1
2023-12-10 13:57:11,529:INFO:               numpy: 1.25.2
2023-12-10 13:57:11,529:INFO:              pandas: 1.5.3
2023-12-10 13:57:11,529:INFO:              jinja2: 3.1.2
2023-12-10 13:57:11,529:INFO:               scipy: 1.10.1
2023-12-10 13:57:11,529:INFO:              joblib: 1.1.1
2023-12-10 13:57:11,529:INFO:             sklearn: 1.2.2
2023-12-10 13:57:11,529:INFO:                pyod: 1.1.2
2023-12-10 13:57:11,529:INFO:            imblearn: 0.11.0
2023-12-10 13:57:11,529:INFO:   category_encoders: 2.6.3
2023-12-10 13:57:11,529:INFO:            lightgbm: 4.1.0
2023-12-10 13:57:11,529:INFO:               numba: 0.58.1
2023-12-10 13:57:11,529:INFO:            requests: 2.31.0
2023-12-10 13:57:11,530:INFO:          matplotlib: 3.6.0
2023-12-10 13:57:11,530:INFO:          scikitplot: 0.3.7
2023-12-10 13:57:11,530:INFO:         yellowbrick: 1.5
2023-12-10 13:57:11,530:INFO:              plotly: 5.18.0
2023-12-10 13:57:11,530:INFO:    plotly-resampler: Not installed
2023-12-10 13:57:11,530:INFO:             kaleido: 0.2.1
2023-12-10 13:57:11,530:INFO:           schemdraw: 0.15
2023-12-10 13:57:11,530:INFO:         statsmodels: 0.14.0
2023-12-10 13:57:11,530:INFO:              sktime: 0.21.1
2023-12-10 13:57:11,530:INFO:               tbats: 1.1.3
2023-12-10 13:57:11,530:INFO:            pmdarima: 2.0.4
2023-12-10 13:57:11,531:INFO:              psutil: 5.9.5
2023-12-10 13:57:11,531:INFO:          markupsafe: 2.1.3
2023-12-10 13:57:11,531:INFO:             pickle5: Not installed
2023-12-10 13:57:11,531:INFO:         cloudpickle: 3.0.0
2023-12-10 13:57:11,531:INFO:         deprecation: 2.1.0
2023-12-10 13:57:11,531:INFO:              xxhash: 3.4.1
2023-12-10 13:57:11,531:INFO:           wurlitzer: Not installed
2023-12-10 13:57:11,531:INFO:PyCaret optional dependencies:
2023-12-10 13:57:11,531:INFO:                shap: Not installed
2023-12-10 13:57:11,531:INFO:           interpret: Not installed
2023-12-10 13:57:11,531:INFO:                umap: Not installed
2023-12-10 13:57:11,531:INFO:     ydata_profiling: 4.6.3
2023-12-10 13:57:11,531:INFO:  explainerdashboard: Not installed
2023-12-10 13:57:11,531:INFO:             autoviz: Not installed
2023-12-10 13:57:11,532:INFO:           fairlearn: Not installed
2023-12-10 13:57:11,532:INFO:          deepchecks: Not installed
2023-12-10 13:57:11,532:INFO:             xgboost: Not installed
2023-12-10 13:57:11,532:INFO:            catboost: Not installed
2023-12-10 13:57:11,532:INFO:              kmodes: Not installed
2023-12-10 13:57:11,532:INFO:             mlxtend: Not installed
2023-12-10 13:57:11,532:INFO:       statsforecast: Not installed
2023-12-10 13:57:11,532:INFO:        tune_sklearn: Not installed
2023-12-10 13:57:11,532:INFO:                 ray: Not installed
2023-12-10 13:57:11,532:INFO:            hyperopt: Not installed
2023-12-10 13:57:11,532:INFO:              optuna: Not installed
2023-12-10 13:57:11,532:INFO:               skopt: Not installed
2023-12-10 13:57:11,532:INFO:              mlflow: Not installed
2023-12-10 13:57:11,532:INFO:              gradio: Not installed
2023-12-10 13:57:11,533:INFO:             fastapi: Not installed
2023-12-10 13:57:11,533:INFO:             uvicorn: Not installed
2023-12-10 13:57:11,533:INFO:              m2cgen: Not installed
2023-12-10 13:57:11,533:INFO:           evidently: Not installed
2023-12-10 13:57:11,533:INFO:               fugue: Not installed
2023-12-10 13:57:11,533:INFO:           streamlit: 1.29.0
2023-12-10 13:57:11,533:INFO:             prophet: Not installed
2023-12-10 13:57:11,533:INFO:None
2023-12-10 13:57:11,533:INFO:Set up data.
2023-12-10 13:57:11,560:INFO:Set up folding strategy.
2023-12-10 13:57:11,560:INFO:Set up train/test split.
2023-12-10 13:57:11,578:INFO:Set up index.
2023-12-10 13:57:11,578:INFO:Assigning column types.
2023-12-10 13:57:11,580:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-12-10 13:57:11,601:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-12-10 13:57:11,601:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-12-10 13:57:11,614:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:57:11,614:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:57:11,634:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-12-10 13:57:11,634:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-12-10 13:57:11,647:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:57:11,647:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:57:11,647:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-12-10 13:57:11,668:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-12-10 13:57:11,680:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:57:11,680:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:57:11,701:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-12-10 13:57:11,713:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:57:11,713:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:57:11,714:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2023-12-10 13:57:11,746:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:57:11,746:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:57:11,778:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:57:11,779:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:57:11,779:INFO:Preparing preprocessing pipeline...
2023-12-10 13:57:11,780:INFO:Set up label encoding.
2023-12-10 13:57:11,780:INFO:Set up simple imputation.
2023-12-10 13:57:11,783:INFO:Set up encoding of ordinal features.
2023-12-10 13:57:11,787:INFO:Set up encoding of categorical features.
2023-12-10 13:57:12,042:INFO:Finished creating preprocessing pipeline.
2023-12-10 13:57:12,062:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\MD\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['amount_deposited_via_counter',
                                             'amount_deposited_via_card',
                                             'balance_on_complaign_date',
                                             'restaurant_poin...
                 TransformerWrapper(exclude=None,
                                    include=['customer_registration_number',
                                             'transaction_date',
                                             'complaint_date'],
                                    transformer=TargetEncoder(cols=['customer_registration_number',
                                                                    'transaction_date',
                                                                    'complaint_date'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0)))],
         verbose=False)
2023-12-10 13:57:12,062:INFO:Creating final display dataframe.
2023-12-10 13:57:12,566:INFO:Setup _display_container:                     Description             Value
0                    Session id              5830
1                        Target        complained
2                   Target type            Binary
3                Target mapping     NO: 0, YES: 1
4           Original data shape       (31924, 22)
5        Transformed data shape       (31924, 50)
6   Transformed train set shape       (22346, 50)
7    Transformed test set shape        (9578, 50)
8              Ordinal features                 4
9              Numeric features                12
10         Categorical features                 9
11     Rows with missing values             17.1%
12                   Preprocess              True
13              Imputation type            simple
14           Numeric imputation              mean
15       Categorical imputation              mode
16     Maximum one-hot encoding                25
17              Encoding method              None
18               Fold Generator   StratifiedKFold
19                  Fold Number                10
20                     CPU Jobs                -1
21                      Use GPU             False
22               Log Experiment             False
23              Experiment Name  clf-default-name
24                          USI              dd40
2023-12-10 13:57:12,602:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:57:12,603:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:57:12,637:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:57:12,637:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-10 13:57:12,637:INFO:setup() successfully completed in 1.11s...............
2023-12-10 13:57:12,639:INFO:Initializing compare_models()
2023-12-10 13:57:12,639:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A9A4549DD0>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001A9A4549DD0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2023-12-10 13:57:12,639:INFO:Checking exceptions
2023-12-10 13:57:12,642:INFO:Preparing display monitor
2023-12-10 13:57:12,643:INFO:Initializing Logistic Regression
2023-12-10 13:57:12,643:INFO:Total runtime is 0.0 minutes
2023-12-10 13:57:12,643:INFO:SubProcess create_model() called ==================================
2023-12-10 13:57:12,643:INFO:Initializing create_model()
2023-12-10 13:57:12,643:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A9A4549DD0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A9A47C4690>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-10 13:57:12,643:INFO:Checking exceptions
2023-12-10 13:57:12,644:INFO:Importing libraries
2023-12-10 13:57:12,644:INFO:Copying training dataset
2023-12-10 13:57:12,647:INFO:Defining folds
2023-12-10 13:57:12,647:INFO:Declaring metric variables
2023-12-10 13:57:12,647:INFO:Importing untrained model
2023-12-10 13:57:12,647:INFO:Logistic Regression Imported successfully
2023-12-10 13:57:12,647:INFO:Starting cross validation
2023-12-10 13:57:12,648:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-10 13:57:13,006:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:13,014:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:13,022:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:13,025:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:13,032:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:13,038:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:13,040:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:13,044:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:13,044:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:13,045:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:13,048:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:13,049:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:13,049:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:13,052:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:13,053:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:13,053:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:13,055:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:13,056:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:13,057:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:13,059:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:13,061:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:13,061:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:13,064:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:13,064:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:13,066:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:13,069:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:13,073:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:13,076:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:13,081:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:13,091:INFO:Calculating mean and std
2023-12-10 13:57:13,092:INFO:Creating metrics dataframe
2023-12-10 13:57:13,093:INFO:Uploading results into container
2023-12-10 13:57:13,094:INFO:Uploading model into container now
2023-12-10 13:57:13,094:INFO:_master_model_container: 1
2023-12-10 13:57:13,094:INFO:_display_container: 2
2023-12-10 13:57:13,094:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5830, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2023-12-10 13:57:13,094:INFO:create_model() successfully completed......................................
2023-12-10 13:57:13,146:INFO:SubProcess create_model() end ==================================
2023-12-10 13:57:13,146:INFO:Creating metrics dataframe
2023-12-10 13:57:13,148:INFO:Initializing K Neighbors Classifier
2023-12-10 13:57:13,148:INFO:Total runtime is 0.008416664600372315 minutes
2023-12-10 13:57:13,148:INFO:SubProcess create_model() called ==================================
2023-12-10 13:57:13,148:INFO:Initializing create_model()
2023-12-10 13:57:13,148:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A9A4549DD0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A9A47C4690>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-10 13:57:13,148:INFO:Checking exceptions
2023-12-10 13:57:13,148:INFO:Importing libraries
2023-12-10 13:57:13,148:INFO:Copying training dataset
2023-12-10 13:57:13,152:INFO:Defining folds
2023-12-10 13:57:13,152:INFO:Declaring metric variables
2023-12-10 13:57:13,152:INFO:Importing untrained model
2023-12-10 13:57:13,152:INFO:K Neighbors Classifier Imported successfully
2023-12-10 13:57:13,152:INFO:Starting cross validation
2023-12-10 13:57:13,153:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-10 13:57:13,771:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:13,782:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:13,794:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:13,829:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:13,835:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:13,836:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:13,840:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:13,846:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:13,848:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:13,850:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:13,858:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:13,860:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:14,126:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:14,133:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:14,134:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:14,140:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:14,141:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:14,148:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:14,165:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:14,167:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:14,173:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:14,175:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:14,180:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:14,182:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:14,214:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:14,222:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:14,222:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:14,229:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:14,230:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:14,237:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:14,248:INFO:Calculating mean and std
2023-12-10 13:57:14,249:INFO:Creating metrics dataframe
2023-12-10 13:57:14,250:INFO:Uploading results into container
2023-12-10 13:57:14,250:INFO:Uploading model into container now
2023-12-10 13:57:14,250:INFO:_master_model_container: 2
2023-12-10 13:57:14,250:INFO:_display_container: 2
2023-12-10 13:57:14,251:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2023-12-10 13:57:14,251:INFO:create_model() successfully completed......................................
2023-12-10 13:57:14,304:INFO:SubProcess create_model() end ==================================
2023-12-10 13:57:14,304:INFO:Creating metrics dataframe
2023-12-10 13:57:14,307:INFO:Initializing Naive Bayes
2023-12-10 13:57:14,307:INFO:Total runtime is 0.027733341852823893 minutes
2023-12-10 13:57:14,307:INFO:SubProcess create_model() called ==================================
2023-12-10 13:57:14,307:INFO:Initializing create_model()
2023-12-10 13:57:14,307:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A9A4549DD0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A9A47C4690>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-10 13:57:14,307:INFO:Checking exceptions
2023-12-10 13:57:14,307:INFO:Importing libraries
2023-12-10 13:57:14,307:INFO:Copying training dataset
2023-12-10 13:57:14,311:INFO:Defining folds
2023-12-10 13:57:14,311:INFO:Declaring metric variables
2023-12-10 13:57:14,311:INFO:Importing untrained model
2023-12-10 13:57:14,311:INFO:Naive Bayes Imported successfully
2023-12-10 13:57:14,311:INFO:Starting cross validation
2023-12-10 13:57:14,312:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-10 13:57:14,628:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:14,632:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:14,632:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:14,636:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:14,639:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:14,640:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:14,641:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:14,644:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:14,644:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:14,647:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:14,647:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:14,648:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:14,649:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:14,649:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:14,652:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:14,653:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-10 13:57:14,654:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:14,654:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:14,654:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:14,655:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-10 13:57:14,656:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:14,657:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:14,657:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:14,658:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:14,660:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-10 13:57:14,661:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-10 13:57:14,661:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:14,664:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:14,664:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:14,664:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:14,665:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:14,669:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:14,672:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:14,673:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:14,684:INFO:Calculating mean and std
2023-12-10 13:57:14,684:INFO:Creating metrics dataframe
2023-12-10 13:57:14,686:INFO:Uploading results into container
2023-12-10 13:57:14,686:INFO:Uploading model into container now
2023-12-10 13:57:14,686:INFO:_master_model_container: 3
2023-12-10 13:57:14,686:INFO:_display_container: 2
2023-12-10 13:57:14,686:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2023-12-10 13:57:14,686:INFO:create_model() successfully completed......................................
2023-12-10 13:57:14,738:INFO:SubProcess create_model() end ==================================
2023-12-10 13:57:14,739:INFO:Creating metrics dataframe
2023-12-10 13:57:14,742:INFO:Initializing Decision Tree Classifier
2023-12-10 13:57:14,742:INFO:Total runtime is 0.03498340845108032 minutes
2023-12-10 13:57:14,742:INFO:SubProcess create_model() called ==================================
2023-12-10 13:57:14,742:INFO:Initializing create_model()
2023-12-10 13:57:14,742:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A9A4549DD0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A9A47C4690>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-10 13:57:14,742:INFO:Checking exceptions
2023-12-10 13:57:14,742:INFO:Importing libraries
2023-12-10 13:57:14,742:INFO:Copying training dataset
2023-12-10 13:57:14,745:INFO:Defining folds
2023-12-10 13:57:14,745:INFO:Declaring metric variables
2023-12-10 13:57:14,746:INFO:Importing untrained model
2023-12-10 13:57:14,746:INFO:Decision Tree Classifier Imported successfully
2023-12-10 13:57:14,746:INFO:Starting cross validation
2023-12-10 13:57:14,747:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-10 13:57:15,046:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,055:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,057:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,063:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,066:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,069:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,070:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,071:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,072:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,077:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,079:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,082:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,083:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,083:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,086:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,086:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,086:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,087:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,090:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,090:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,090:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,093:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,095:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,098:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,100:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,100:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,101:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,102:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,108:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,115:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,126:INFO:Calculating mean and std
2023-12-10 13:57:15,127:INFO:Creating metrics dataframe
2023-12-10 13:57:15,128:INFO:Uploading results into container
2023-12-10 13:57:15,128:INFO:Uploading model into container now
2023-12-10 13:57:15,128:INFO:_master_model_container: 4
2023-12-10 13:57:15,129:INFO:_display_container: 2
2023-12-10 13:57:15,129:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5830, splitter='best')
2023-12-10 13:57:15,129:INFO:create_model() successfully completed......................................
2023-12-10 13:57:15,183:INFO:SubProcess create_model() end ==================================
2023-12-10 13:57:15,183:INFO:Creating metrics dataframe
2023-12-10 13:57:15,185:INFO:Initializing SVM - Linear Kernel
2023-12-10 13:57:15,185:INFO:Total runtime is 0.042366667588551836 minutes
2023-12-10 13:57:15,185:INFO:SubProcess create_model() called ==================================
2023-12-10 13:57:15,185:INFO:Initializing create_model()
2023-12-10 13:57:15,185:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A9A4549DD0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A9A47C4690>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-10 13:57:15,185:INFO:Checking exceptions
2023-12-10 13:57:15,185:INFO:Importing libraries
2023-12-10 13:57:15,185:INFO:Copying training dataset
2023-12-10 13:57:15,189:INFO:Defining folds
2023-12-10 13:57:15,189:INFO:Declaring metric variables
2023-12-10 13:57:15,189:INFO:Importing untrained model
2023-12-10 13:57:15,189:INFO:SVM - Linear Kernel Imported successfully
2023-12-10 13:57:15,190:INFO:Starting cross validation
2023-12-10 13:57:15,190:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-10 13:57:15,514:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-12-10 13:57:15,518:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-12-10 13:57:15,518:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,521:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,523:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-12-10 13:57:15,525:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-12-10 13:57:15,526:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,528:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,529:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,529:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,530:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-12-10 13:57:15,534:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,535:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,536:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,537:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,537:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,539:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-12-10 13:57:15,543:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,543:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-12-10 13:57:15,544:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,544:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,544:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,548:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-12-10 13:57:15,548:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,548:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-12-10 13:57:15,550:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,551:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,551:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,552:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,558:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,558:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,559:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,562:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,563:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-10 13:57:15,565:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-12-10 13:57:15,566:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,566:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,568:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,572:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,576:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,584:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,595:INFO:Calculating mean and std
2023-12-10 13:57:15,596:INFO:Creating metrics dataframe
2023-12-10 13:57:15,597:INFO:Uploading results into container
2023-12-10 13:57:15,597:INFO:Uploading model into container now
2023-12-10 13:57:15,598:INFO:_master_model_container: 5
2023-12-10 13:57:15,598:INFO:_display_container: 2
2023-12-10 13:57:15,598:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=5830, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2023-12-10 13:57:15,598:INFO:create_model() successfully completed......................................
2023-12-10 13:57:15,647:INFO:SubProcess create_model() end ==================================
2023-12-10 13:57:15,647:INFO:Creating metrics dataframe
2023-12-10 13:57:15,649:INFO:Initializing Ridge Classifier
2023-12-10 13:57:15,649:INFO:Total runtime is 0.05010002851486206 minutes
2023-12-10 13:57:15,649:INFO:SubProcess create_model() called ==================================
2023-12-10 13:57:15,649:INFO:Initializing create_model()
2023-12-10 13:57:15,649:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A9A4549DD0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A9A47C4690>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-10 13:57:15,649:INFO:Checking exceptions
2023-12-10 13:57:15,650:INFO:Importing libraries
2023-12-10 13:57:15,650:INFO:Copying training dataset
2023-12-10 13:57:15,654:INFO:Defining folds
2023-12-10 13:57:15,654:INFO:Declaring metric variables
2023-12-10 13:57:15,654:INFO:Importing untrained model
2023-12-10 13:57:15,654:INFO:Ridge Classifier Imported successfully
2023-12-10 13:57:15,654:INFO:Starting cross validation
2023-12-10 13:57:15,655:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-10 13:57:15,932:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.91396e-22): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2023-12-10 13:57:15,936:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.90964e-22): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2023-12-10 13:57:15,952:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.9492e-22): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2023-12-10 13:57:15,952:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.91101e-22): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2023-12-10 13:57:15,960:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.9117e-22): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2023-12-10 13:57:15,964:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.91082e-22): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2023-12-10 13:57:15,965:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.91124e-22): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2023-12-10 13:57:15,967:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.91342e-22): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2023-12-10 13:57:15,968:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.09666e-21): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2023-12-10 13:57:15,974:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\linear_model\_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.91374e-22): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2023-12-10 13:57:15,976:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-12-10 13:57:15,977:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-12-10 13:57:15,980:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,981:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,985:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-12-10 13:57:15,987:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,988:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,993:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,994:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-12-10 13:57:15,996:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,996:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-12-10 13:57:15,996:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-12-10 13:57:15,997:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-12-10 13:57:15,997:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-12-10 13:57:15,997:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:15,998:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:16,000:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:16,000:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:16,001:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:16,003:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:16,004:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:16,005:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-12-10 13:57:16,007:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:16,007:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:16,008:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:16,008:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-12-10 13:57:16,009:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:16,009:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:16,012:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:16,012:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:16,015:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:16,015:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:16,016:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:16,016:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:16,017:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:16,019:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:16,022:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:16,024:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:16,027:WARNING:C:\Users\MD\anaconda3\envs\nmb-ml\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-10 13:57:16,038:INFO:Calculating mean and std
2023-12-10 13:57:16,038:INFO:Creating metrics dataframe
2023-12-10 13:57:16,039:INFO:Uploading results into container
2023-12-10 13:57:16,040:INFO:Uploading model into container now
2023-12-10 13:57:16,040:INFO:_master_model_container: 6
2023-12-10 13:57:16,040:INFO:_display_container: 2
2023-12-10 13:57:16,040:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=5830, solver='auto',
                tol=0.0001)
2023-12-10 13:57:16,040:INFO:create_model() successfully completed......................................
2023-12-10 13:57:16,090:INFO:SubProcess create_model() end ==================================
2023-12-10 13:57:16,091:INFO:Creating metrics dataframe
2023-12-10 13:57:16,093:INFO:Initializing Random Forest Classifier
2023-12-10 13:57:16,093:INFO:Total runtime is 0.05750000476837158 minutes
2023-12-10 13:57:16,093:INFO:SubProcess create_model() called ==================================
2023-12-10 13:57:16,093:INFO:Initializing create_model()
2023-12-10 13:57:16,093:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A9A4549DD0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A9A47C4690>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-10 13:57:16,093:INFO:Checking exceptions
2023-12-10 13:57:16,093:INFO:Importing libraries
2023-12-10 13:57:16,094:INFO:Copying training dataset
2023-12-10 13:57:16,097:INFO:Defining folds
2023-12-10 13:57:16,097:INFO:Declaring metric variables
2023-12-10 13:57:16,098:INFO:Importing untrained model
2023-12-10 13:57:16,098:INFO:Random Forest Classifier Imported successfully
2023-12-10 13:57:16,098:INFO:Starting cross validation
2023-12-10 13:57:16,099:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
